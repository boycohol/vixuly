
exercise3_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a38  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002b44  08002b44  00012b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b64  08002b64  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08002b64  08002b64  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b64  08002b64  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b64  08002b64  00012b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b68  08002b68  00012b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08002b6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000030  08002b9c  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08002b9c  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008609  00000000  00000000  00020059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000192d  00000000  00000000  00028662  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a10  00000000  00000000  00029f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000166c1  00000000  00000000  0002a9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000a492  00000000  00000000  00041061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000821ed  00000000  00000000  0004b4f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000cd6e0  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000920  00000000  00000000  000cd730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002820  00000000  00000000  000ce050  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000030 	.word	0x20000030
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b2c 	.word	0x08002b2c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000034 	.word	0x20000034
 8000148:	08002b2c 	.word	0x08002b2c

0800014c <display7SEG1>:
#include "input_processing.h"
#include "main.h"
#include "global.h"
#include "input_reading.h"

void display7SEG1(int num) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	switch (num) {
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b09      	cmp	r3, #9
 8000158:	f200 8180 	bhi.w	800045c <display7SEG1+0x310>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <display7SEG1+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	0800018d 	.word	0x0800018d
 8000168:	080001d5 	.word	0x080001d5
 800016c:	0800021d 	.word	0x0800021d
 8000170:	08000265 	.word	0x08000265
 8000174:	080002ad 	.word	0x080002ad
 8000178:	080002f5 	.word	0x080002f5
 800017c:	0800033d 	.word	0x0800033d
 8000180:	08000385 	.word	0x08000385
 8000184:	080003cd 	.word	0x080003cd
 8000188:	08000415 	.word	0x08000415
	case 0:
		HAL_GPIO_WritePin(SEG1_0_GPIO_Port, SEG1_0_Pin, 0);
 800018c:	2200      	movs	r2, #0
 800018e:	2102      	movs	r1, #2
 8000190:	48c6      	ldr	r0, [pc, #792]	; (80004ac <display7SEG1+0x360>)
 8000192:	f001 fca2 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, 0);
 8000196:	2200      	movs	r2, #0
 8000198:	2104      	movs	r1, #4
 800019a:	48c4      	ldr	r0, [pc, #784]	; (80004ac <display7SEG1+0x360>)
 800019c:	f001 fc9d 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, 0);
 80001a0:	2200      	movs	r2, #0
 80001a2:	2108      	movs	r1, #8
 80001a4:	48c1      	ldr	r0, [pc, #772]	; (80004ac <display7SEG1+0x360>)
 80001a6:	f001 fc98 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, 0);
 80001aa:	2200      	movs	r2, #0
 80001ac:	2110      	movs	r1, #16
 80001ae:	48bf      	ldr	r0, [pc, #764]	; (80004ac <display7SEG1+0x360>)
 80001b0:	f001 fc93 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, 0);
 80001b4:	2200      	movs	r2, #0
 80001b6:	2120      	movs	r1, #32
 80001b8:	48bc      	ldr	r0, [pc, #752]	; (80004ac <display7SEG1+0x360>)
 80001ba:	f001 fc8e 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, 0);
 80001be:	2200      	movs	r2, #0
 80001c0:	2140      	movs	r1, #64	; 0x40
 80001c2:	48ba      	ldr	r0, [pc, #744]	; (80004ac <display7SEG1+0x360>)
 80001c4:	f001 fc89 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, 1);
 80001c8:	2201      	movs	r2, #1
 80001ca:	2180      	movs	r1, #128	; 0x80
 80001cc:	48b7      	ldr	r0, [pc, #732]	; (80004ac <display7SEG1+0x360>)
 80001ce:	f001 fc84 	bl	8001ada <HAL_GPIO_WritePin>
		break;
 80001d2:	e167      	b.n	80004a4 <display7SEG1+0x358>
	case 1:
		HAL_GPIO_WritePin(SEG1_0_GPIO_Port, SEG1_0_Pin, 1);
 80001d4:	2201      	movs	r2, #1
 80001d6:	2102      	movs	r1, #2
 80001d8:	48b4      	ldr	r0, [pc, #720]	; (80004ac <display7SEG1+0x360>)
 80001da:	f001 fc7e 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, 0);
 80001de:	2200      	movs	r2, #0
 80001e0:	2104      	movs	r1, #4
 80001e2:	48b2      	ldr	r0, [pc, #712]	; (80004ac <display7SEG1+0x360>)
 80001e4:	f001 fc79 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, 0);
 80001e8:	2200      	movs	r2, #0
 80001ea:	2108      	movs	r1, #8
 80001ec:	48af      	ldr	r0, [pc, #700]	; (80004ac <display7SEG1+0x360>)
 80001ee:	f001 fc74 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, 1);
 80001f2:	2201      	movs	r2, #1
 80001f4:	2110      	movs	r1, #16
 80001f6:	48ad      	ldr	r0, [pc, #692]	; (80004ac <display7SEG1+0x360>)
 80001f8:	f001 fc6f 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, 1);
 80001fc:	2201      	movs	r2, #1
 80001fe:	2120      	movs	r1, #32
 8000200:	48aa      	ldr	r0, [pc, #680]	; (80004ac <display7SEG1+0x360>)
 8000202:	f001 fc6a 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, 1);
 8000206:	2201      	movs	r2, #1
 8000208:	2140      	movs	r1, #64	; 0x40
 800020a:	48a8      	ldr	r0, [pc, #672]	; (80004ac <display7SEG1+0x360>)
 800020c:	f001 fc65 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, 1);
 8000210:	2201      	movs	r2, #1
 8000212:	2180      	movs	r1, #128	; 0x80
 8000214:	48a5      	ldr	r0, [pc, #660]	; (80004ac <display7SEG1+0x360>)
 8000216:	f001 fc60 	bl	8001ada <HAL_GPIO_WritePin>
		break;
 800021a:	e143      	b.n	80004a4 <display7SEG1+0x358>
	case 2:
		HAL_GPIO_WritePin(SEG1_0_GPIO_Port, SEG1_0_Pin, 0);
 800021c:	2200      	movs	r2, #0
 800021e:	2102      	movs	r1, #2
 8000220:	48a2      	ldr	r0, [pc, #648]	; (80004ac <display7SEG1+0x360>)
 8000222:	f001 fc5a 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, 0);
 8000226:	2200      	movs	r2, #0
 8000228:	2104      	movs	r1, #4
 800022a:	48a0      	ldr	r0, [pc, #640]	; (80004ac <display7SEG1+0x360>)
 800022c:	f001 fc55 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, 1);
 8000230:	2201      	movs	r2, #1
 8000232:	2108      	movs	r1, #8
 8000234:	489d      	ldr	r0, [pc, #628]	; (80004ac <display7SEG1+0x360>)
 8000236:	f001 fc50 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, 0);
 800023a:	2200      	movs	r2, #0
 800023c:	2110      	movs	r1, #16
 800023e:	489b      	ldr	r0, [pc, #620]	; (80004ac <display7SEG1+0x360>)
 8000240:	f001 fc4b 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, 0);
 8000244:	2200      	movs	r2, #0
 8000246:	2120      	movs	r1, #32
 8000248:	4898      	ldr	r0, [pc, #608]	; (80004ac <display7SEG1+0x360>)
 800024a:	f001 fc46 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, 1);
 800024e:	2201      	movs	r2, #1
 8000250:	2140      	movs	r1, #64	; 0x40
 8000252:	4896      	ldr	r0, [pc, #600]	; (80004ac <display7SEG1+0x360>)
 8000254:	f001 fc41 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, 0);
 8000258:	2200      	movs	r2, #0
 800025a:	2180      	movs	r1, #128	; 0x80
 800025c:	4893      	ldr	r0, [pc, #588]	; (80004ac <display7SEG1+0x360>)
 800025e:	f001 fc3c 	bl	8001ada <HAL_GPIO_WritePin>
		break;
 8000262:	e11f      	b.n	80004a4 <display7SEG1+0x358>
	case 3:
		HAL_GPIO_WritePin(SEG1_0_GPIO_Port, SEG1_0_Pin, 0);
 8000264:	2200      	movs	r2, #0
 8000266:	2102      	movs	r1, #2
 8000268:	4890      	ldr	r0, [pc, #576]	; (80004ac <display7SEG1+0x360>)
 800026a:	f001 fc36 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, 0);
 800026e:	2200      	movs	r2, #0
 8000270:	2104      	movs	r1, #4
 8000272:	488e      	ldr	r0, [pc, #568]	; (80004ac <display7SEG1+0x360>)
 8000274:	f001 fc31 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, 0);
 8000278:	2200      	movs	r2, #0
 800027a:	2108      	movs	r1, #8
 800027c:	488b      	ldr	r0, [pc, #556]	; (80004ac <display7SEG1+0x360>)
 800027e:	f001 fc2c 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, 0);
 8000282:	2200      	movs	r2, #0
 8000284:	2110      	movs	r1, #16
 8000286:	4889      	ldr	r0, [pc, #548]	; (80004ac <display7SEG1+0x360>)
 8000288:	f001 fc27 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, 1);
 800028c:	2201      	movs	r2, #1
 800028e:	2120      	movs	r1, #32
 8000290:	4886      	ldr	r0, [pc, #536]	; (80004ac <display7SEG1+0x360>)
 8000292:	f001 fc22 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, 1);
 8000296:	2201      	movs	r2, #1
 8000298:	2140      	movs	r1, #64	; 0x40
 800029a:	4884      	ldr	r0, [pc, #528]	; (80004ac <display7SEG1+0x360>)
 800029c:	f001 fc1d 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, 0);
 80002a0:	2200      	movs	r2, #0
 80002a2:	2180      	movs	r1, #128	; 0x80
 80002a4:	4881      	ldr	r0, [pc, #516]	; (80004ac <display7SEG1+0x360>)
 80002a6:	f001 fc18 	bl	8001ada <HAL_GPIO_WritePin>
		break;
 80002aa:	e0fb      	b.n	80004a4 <display7SEG1+0x358>
	case 4:
		HAL_GPIO_WritePin(SEG1_0_GPIO_Port, SEG1_0_Pin, 1);
 80002ac:	2201      	movs	r2, #1
 80002ae:	2102      	movs	r1, #2
 80002b0:	487e      	ldr	r0, [pc, #504]	; (80004ac <display7SEG1+0x360>)
 80002b2:	f001 fc12 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, 0);
 80002b6:	2200      	movs	r2, #0
 80002b8:	2104      	movs	r1, #4
 80002ba:	487c      	ldr	r0, [pc, #496]	; (80004ac <display7SEG1+0x360>)
 80002bc:	f001 fc0d 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, 0);
 80002c0:	2200      	movs	r2, #0
 80002c2:	2108      	movs	r1, #8
 80002c4:	4879      	ldr	r0, [pc, #484]	; (80004ac <display7SEG1+0x360>)
 80002c6:	f001 fc08 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, 1);
 80002ca:	2201      	movs	r2, #1
 80002cc:	2110      	movs	r1, #16
 80002ce:	4877      	ldr	r0, [pc, #476]	; (80004ac <display7SEG1+0x360>)
 80002d0:	f001 fc03 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, 1);
 80002d4:	2201      	movs	r2, #1
 80002d6:	2120      	movs	r1, #32
 80002d8:	4874      	ldr	r0, [pc, #464]	; (80004ac <display7SEG1+0x360>)
 80002da:	f001 fbfe 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, 0);
 80002de:	2200      	movs	r2, #0
 80002e0:	2140      	movs	r1, #64	; 0x40
 80002e2:	4872      	ldr	r0, [pc, #456]	; (80004ac <display7SEG1+0x360>)
 80002e4:	f001 fbf9 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, 0);
 80002e8:	2200      	movs	r2, #0
 80002ea:	2180      	movs	r1, #128	; 0x80
 80002ec:	486f      	ldr	r0, [pc, #444]	; (80004ac <display7SEG1+0x360>)
 80002ee:	f001 fbf4 	bl	8001ada <HAL_GPIO_WritePin>
		break;
 80002f2:	e0d7      	b.n	80004a4 <display7SEG1+0x358>
	case 5:
		HAL_GPIO_WritePin(SEG1_0_GPIO_Port, SEG1_0_Pin, 0);
 80002f4:	2200      	movs	r2, #0
 80002f6:	2102      	movs	r1, #2
 80002f8:	486c      	ldr	r0, [pc, #432]	; (80004ac <display7SEG1+0x360>)
 80002fa:	f001 fbee 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, 1);
 80002fe:	2201      	movs	r2, #1
 8000300:	2104      	movs	r1, #4
 8000302:	486a      	ldr	r0, [pc, #424]	; (80004ac <display7SEG1+0x360>)
 8000304:	f001 fbe9 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, 0);
 8000308:	2200      	movs	r2, #0
 800030a:	2108      	movs	r1, #8
 800030c:	4867      	ldr	r0, [pc, #412]	; (80004ac <display7SEG1+0x360>)
 800030e:	f001 fbe4 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, 0);
 8000312:	2200      	movs	r2, #0
 8000314:	2110      	movs	r1, #16
 8000316:	4865      	ldr	r0, [pc, #404]	; (80004ac <display7SEG1+0x360>)
 8000318:	f001 fbdf 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, 1);
 800031c:	2201      	movs	r2, #1
 800031e:	2120      	movs	r1, #32
 8000320:	4862      	ldr	r0, [pc, #392]	; (80004ac <display7SEG1+0x360>)
 8000322:	f001 fbda 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, 0);
 8000326:	2200      	movs	r2, #0
 8000328:	2140      	movs	r1, #64	; 0x40
 800032a:	4860      	ldr	r0, [pc, #384]	; (80004ac <display7SEG1+0x360>)
 800032c:	f001 fbd5 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, 0);
 8000330:	2200      	movs	r2, #0
 8000332:	2180      	movs	r1, #128	; 0x80
 8000334:	485d      	ldr	r0, [pc, #372]	; (80004ac <display7SEG1+0x360>)
 8000336:	f001 fbd0 	bl	8001ada <HAL_GPIO_WritePin>
		break;
 800033a:	e0b3      	b.n	80004a4 <display7SEG1+0x358>
	case 6:
		HAL_GPIO_WritePin(SEG1_0_GPIO_Port, SEG1_0_Pin, 0);
 800033c:	2200      	movs	r2, #0
 800033e:	2102      	movs	r1, #2
 8000340:	485a      	ldr	r0, [pc, #360]	; (80004ac <display7SEG1+0x360>)
 8000342:	f001 fbca 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, 1);
 8000346:	2201      	movs	r2, #1
 8000348:	2104      	movs	r1, #4
 800034a:	4858      	ldr	r0, [pc, #352]	; (80004ac <display7SEG1+0x360>)
 800034c:	f001 fbc5 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, 0);
 8000350:	2200      	movs	r2, #0
 8000352:	2108      	movs	r1, #8
 8000354:	4855      	ldr	r0, [pc, #340]	; (80004ac <display7SEG1+0x360>)
 8000356:	f001 fbc0 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, 0);
 800035a:	2200      	movs	r2, #0
 800035c:	2110      	movs	r1, #16
 800035e:	4853      	ldr	r0, [pc, #332]	; (80004ac <display7SEG1+0x360>)
 8000360:	f001 fbbb 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, 0);
 8000364:	2200      	movs	r2, #0
 8000366:	2120      	movs	r1, #32
 8000368:	4850      	ldr	r0, [pc, #320]	; (80004ac <display7SEG1+0x360>)
 800036a:	f001 fbb6 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, 0);
 800036e:	2200      	movs	r2, #0
 8000370:	2140      	movs	r1, #64	; 0x40
 8000372:	484e      	ldr	r0, [pc, #312]	; (80004ac <display7SEG1+0x360>)
 8000374:	f001 fbb1 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, 0);
 8000378:	2200      	movs	r2, #0
 800037a:	2180      	movs	r1, #128	; 0x80
 800037c:	484b      	ldr	r0, [pc, #300]	; (80004ac <display7SEG1+0x360>)
 800037e:	f001 fbac 	bl	8001ada <HAL_GPIO_WritePin>
		break;
 8000382:	e08f      	b.n	80004a4 <display7SEG1+0x358>
	case 7:
		HAL_GPIO_WritePin(SEG1_0_GPIO_Port, SEG1_0_Pin, 0);
 8000384:	2200      	movs	r2, #0
 8000386:	2102      	movs	r1, #2
 8000388:	4848      	ldr	r0, [pc, #288]	; (80004ac <display7SEG1+0x360>)
 800038a:	f001 fba6 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, 0);
 800038e:	2200      	movs	r2, #0
 8000390:	2104      	movs	r1, #4
 8000392:	4846      	ldr	r0, [pc, #280]	; (80004ac <display7SEG1+0x360>)
 8000394:	f001 fba1 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, 0);
 8000398:	2200      	movs	r2, #0
 800039a:	2108      	movs	r1, #8
 800039c:	4843      	ldr	r0, [pc, #268]	; (80004ac <display7SEG1+0x360>)
 800039e:	f001 fb9c 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, 1);
 80003a2:	2201      	movs	r2, #1
 80003a4:	2110      	movs	r1, #16
 80003a6:	4841      	ldr	r0, [pc, #260]	; (80004ac <display7SEG1+0x360>)
 80003a8:	f001 fb97 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, 1);
 80003ac:	2201      	movs	r2, #1
 80003ae:	2120      	movs	r1, #32
 80003b0:	483e      	ldr	r0, [pc, #248]	; (80004ac <display7SEG1+0x360>)
 80003b2:	f001 fb92 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, 1);
 80003b6:	2201      	movs	r2, #1
 80003b8:	2140      	movs	r1, #64	; 0x40
 80003ba:	483c      	ldr	r0, [pc, #240]	; (80004ac <display7SEG1+0x360>)
 80003bc:	f001 fb8d 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, 1);
 80003c0:	2201      	movs	r2, #1
 80003c2:	2180      	movs	r1, #128	; 0x80
 80003c4:	4839      	ldr	r0, [pc, #228]	; (80004ac <display7SEG1+0x360>)
 80003c6:	f001 fb88 	bl	8001ada <HAL_GPIO_WritePin>
		break;
 80003ca:	e06b      	b.n	80004a4 <display7SEG1+0x358>
	case 8:
		HAL_GPIO_WritePin(SEG1_0_GPIO_Port, SEG1_0_Pin, 0);
 80003cc:	2200      	movs	r2, #0
 80003ce:	2102      	movs	r1, #2
 80003d0:	4836      	ldr	r0, [pc, #216]	; (80004ac <display7SEG1+0x360>)
 80003d2:	f001 fb82 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, 0);
 80003d6:	2200      	movs	r2, #0
 80003d8:	2104      	movs	r1, #4
 80003da:	4834      	ldr	r0, [pc, #208]	; (80004ac <display7SEG1+0x360>)
 80003dc:	f001 fb7d 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, 0);
 80003e0:	2200      	movs	r2, #0
 80003e2:	2108      	movs	r1, #8
 80003e4:	4831      	ldr	r0, [pc, #196]	; (80004ac <display7SEG1+0x360>)
 80003e6:	f001 fb78 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, 0);
 80003ea:	2200      	movs	r2, #0
 80003ec:	2110      	movs	r1, #16
 80003ee:	482f      	ldr	r0, [pc, #188]	; (80004ac <display7SEG1+0x360>)
 80003f0:	f001 fb73 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, 0);
 80003f4:	2200      	movs	r2, #0
 80003f6:	2120      	movs	r1, #32
 80003f8:	482c      	ldr	r0, [pc, #176]	; (80004ac <display7SEG1+0x360>)
 80003fa:	f001 fb6e 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, 0);
 80003fe:	2200      	movs	r2, #0
 8000400:	2140      	movs	r1, #64	; 0x40
 8000402:	482a      	ldr	r0, [pc, #168]	; (80004ac <display7SEG1+0x360>)
 8000404:	f001 fb69 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, 0);
 8000408:	2200      	movs	r2, #0
 800040a:	2180      	movs	r1, #128	; 0x80
 800040c:	4827      	ldr	r0, [pc, #156]	; (80004ac <display7SEG1+0x360>)
 800040e:	f001 fb64 	bl	8001ada <HAL_GPIO_WritePin>
		break;
 8000412:	e047      	b.n	80004a4 <display7SEG1+0x358>
	case 9:
		HAL_GPIO_WritePin(SEG1_0_GPIO_Port, SEG1_0_Pin, 0);
 8000414:	2200      	movs	r2, #0
 8000416:	2102      	movs	r1, #2
 8000418:	4824      	ldr	r0, [pc, #144]	; (80004ac <display7SEG1+0x360>)
 800041a:	f001 fb5e 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, 0);
 800041e:	2200      	movs	r2, #0
 8000420:	2104      	movs	r1, #4
 8000422:	4822      	ldr	r0, [pc, #136]	; (80004ac <display7SEG1+0x360>)
 8000424:	f001 fb59 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, 0);
 8000428:	2200      	movs	r2, #0
 800042a:	2108      	movs	r1, #8
 800042c:	481f      	ldr	r0, [pc, #124]	; (80004ac <display7SEG1+0x360>)
 800042e:	f001 fb54 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, 0);
 8000432:	2200      	movs	r2, #0
 8000434:	2110      	movs	r1, #16
 8000436:	481d      	ldr	r0, [pc, #116]	; (80004ac <display7SEG1+0x360>)
 8000438:	f001 fb4f 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, 1);
 800043c:	2201      	movs	r2, #1
 800043e:	2120      	movs	r1, #32
 8000440:	481a      	ldr	r0, [pc, #104]	; (80004ac <display7SEG1+0x360>)
 8000442:	f001 fb4a 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, 0);
 8000446:	2200      	movs	r2, #0
 8000448:	2140      	movs	r1, #64	; 0x40
 800044a:	4818      	ldr	r0, [pc, #96]	; (80004ac <display7SEG1+0x360>)
 800044c:	f001 fb45 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, 0);
 8000450:	2200      	movs	r2, #0
 8000452:	2180      	movs	r1, #128	; 0x80
 8000454:	4815      	ldr	r0, [pc, #84]	; (80004ac <display7SEG1+0x360>)
 8000456:	f001 fb40 	bl	8001ada <HAL_GPIO_WritePin>
		break;
 800045a:	e023      	b.n	80004a4 <display7SEG1+0x358>
	default:
		HAL_GPIO_WritePin(SEG1_0_GPIO_Port, SEG1_0_Pin, 1);
 800045c:	2201      	movs	r2, #1
 800045e:	2102      	movs	r1, #2
 8000460:	4812      	ldr	r0, [pc, #72]	; (80004ac <display7SEG1+0x360>)
 8000462:	f001 fb3a 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, 1);
 8000466:	2201      	movs	r2, #1
 8000468:	2104      	movs	r1, #4
 800046a:	4810      	ldr	r0, [pc, #64]	; (80004ac <display7SEG1+0x360>)
 800046c:	f001 fb35 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, 1);
 8000470:	2201      	movs	r2, #1
 8000472:	2108      	movs	r1, #8
 8000474:	480d      	ldr	r0, [pc, #52]	; (80004ac <display7SEG1+0x360>)
 8000476:	f001 fb30 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, 1);
 800047a:	2201      	movs	r2, #1
 800047c:	2110      	movs	r1, #16
 800047e:	480b      	ldr	r0, [pc, #44]	; (80004ac <display7SEG1+0x360>)
 8000480:	f001 fb2b 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, 1);
 8000484:	2201      	movs	r2, #1
 8000486:	2120      	movs	r1, #32
 8000488:	4808      	ldr	r0, [pc, #32]	; (80004ac <display7SEG1+0x360>)
 800048a:	f001 fb26 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, 1);
 800048e:	2201      	movs	r2, #1
 8000490:	2140      	movs	r1, #64	; 0x40
 8000492:	4806      	ldr	r0, [pc, #24]	; (80004ac <display7SEG1+0x360>)
 8000494:	f001 fb21 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, 1);
 8000498:	2201      	movs	r2, #1
 800049a:	2180      	movs	r1, #128	; 0x80
 800049c:	4803      	ldr	r0, [pc, #12]	; (80004ac <display7SEG1+0x360>)
 800049e:	f001 fb1c 	bl	8001ada <HAL_GPIO_WritePin>
		break;
 80004a2:	bf00      	nop
	}
}
 80004a4:	bf00      	nop
 80004a6:	3708      	adds	r7, #8
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	40010c00 	.word	0x40010c00

080004b0 <display7SEG2>:
void display7SEG2(int num) {
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
	switch (num) {
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	2b09      	cmp	r3, #9
 80004bc:	f200 81b6 	bhi.w	800082c <display7SEG2+0x37c>
 80004c0:	a201      	add	r2, pc, #4	; (adr r2, 80004c8 <display7SEG2+0x18>)
 80004c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004c6:	bf00      	nop
 80004c8:	080004f1 	.word	0x080004f1
 80004cc:	08000543 	.word	0x08000543
 80004d0:	08000595 	.word	0x08000595
 80004d4:	080005e7 	.word	0x080005e7
 80004d8:	08000639 	.word	0x08000639
 80004dc:	0800068b 	.word	0x0800068b
 80004e0:	080006dd 	.word	0x080006dd
 80004e4:	0800072f 	.word	0x0800072f
 80004e8:	08000781 	.word	0x08000781
 80004ec:	080007d3 	.word	0x080007d3
	case 0:
		HAL_GPIO_WritePin(SEG2_0_GPIO_Port, SEG2_0_Pin, 0);
 80004f0:	2200      	movs	r2, #0
 80004f2:	2180      	movs	r1, #128	; 0x80
 80004f4:	48cb      	ldr	r0, [pc, #812]	; (8000824 <display7SEG2+0x374>)
 80004f6:	f001 faf0 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_1_GPIO_Port, SEG2_1_Pin, 0);
 80004fa:	2200      	movs	r2, #0
 80004fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000500:	48c8      	ldr	r0, [pc, #800]	; (8000824 <display7SEG2+0x374>)
 8000502:	f001 faea 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_2_GPIO_Port, SEG2_2_Pin, 0);
 8000506:	2200      	movs	r2, #0
 8000508:	f44f 7100 	mov.w	r1, #512	; 0x200
 800050c:	48c5      	ldr	r0, [pc, #788]	; (8000824 <display7SEG2+0x374>)
 800050e:	f001 fae4 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_3_GPIO_Port, SEG2_3_Pin, 0);
 8000512:	2200      	movs	r2, #0
 8000514:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000518:	48c2      	ldr	r0, [pc, #776]	; (8000824 <display7SEG2+0x374>)
 800051a:	f001 fade 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_4_GPIO_Port, SEG2_4_Pin, 0);
 800051e:	2200      	movs	r2, #0
 8000520:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000524:	48bf      	ldr	r0, [pc, #764]	; (8000824 <display7SEG2+0x374>)
 8000526:	f001 fad8 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_5_GPIO_Port, SEG2_5_Pin, 0);
 800052a:	2200      	movs	r2, #0
 800052c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000530:	48bc      	ldr	r0, [pc, #752]	; (8000824 <display7SEG2+0x374>)
 8000532:	f001 fad2 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_6_GPIO_Port, SEG2_6_Pin, 1);
 8000536:	2201      	movs	r2, #1
 8000538:	2101      	movs	r1, #1
 800053a:	48bb      	ldr	r0, [pc, #748]	; (8000828 <display7SEG2+0x378>)
 800053c:	f001 facd 	bl	8001ada <HAL_GPIO_WritePin>
		break;
 8000540:	e19d      	b.n	800087e <display7SEG2+0x3ce>
	case 1:
		HAL_GPIO_WritePin(SEG2_0_GPIO_Port, SEG2_0_Pin, 1);
 8000542:	2201      	movs	r2, #1
 8000544:	2180      	movs	r1, #128	; 0x80
 8000546:	48b7      	ldr	r0, [pc, #732]	; (8000824 <display7SEG2+0x374>)
 8000548:	f001 fac7 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_1_GPIO_Port, SEG2_1_Pin, 0);
 800054c:	2200      	movs	r2, #0
 800054e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000552:	48b4      	ldr	r0, [pc, #720]	; (8000824 <display7SEG2+0x374>)
 8000554:	f001 fac1 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_2_GPIO_Port, SEG2_2_Pin, 0);
 8000558:	2200      	movs	r2, #0
 800055a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800055e:	48b1      	ldr	r0, [pc, #708]	; (8000824 <display7SEG2+0x374>)
 8000560:	f001 fabb 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_3_GPIO_Port, SEG2_3_Pin, 1);
 8000564:	2201      	movs	r2, #1
 8000566:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800056a:	48ae      	ldr	r0, [pc, #696]	; (8000824 <display7SEG2+0x374>)
 800056c:	f001 fab5 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_4_GPIO_Port, SEG2_4_Pin, 1);
 8000570:	2201      	movs	r2, #1
 8000572:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000576:	48ab      	ldr	r0, [pc, #684]	; (8000824 <display7SEG2+0x374>)
 8000578:	f001 faaf 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_5_GPIO_Port, SEG2_5_Pin, 1);
 800057c:	2201      	movs	r2, #1
 800057e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000582:	48a8      	ldr	r0, [pc, #672]	; (8000824 <display7SEG2+0x374>)
 8000584:	f001 faa9 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_6_GPIO_Port, SEG2_6_Pin, 1);
 8000588:	2201      	movs	r2, #1
 800058a:	2101      	movs	r1, #1
 800058c:	48a6      	ldr	r0, [pc, #664]	; (8000828 <display7SEG2+0x378>)
 800058e:	f001 faa4 	bl	8001ada <HAL_GPIO_WritePin>
		break;
 8000592:	e174      	b.n	800087e <display7SEG2+0x3ce>
	case 2:
		HAL_GPIO_WritePin(SEG2_0_GPIO_Port, SEG2_0_Pin, 0);
 8000594:	2200      	movs	r2, #0
 8000596:	2180      	movs	r1, #128	; 0x80
 8000598:	48a2      	ldr	r0, [pc, #648]	; (8000824 <display7SEG2+0x374>)
 800059a:	f001 fa9e 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_1_GPIO_Port, SEG2_1_Pin, 0);
 800059e:	2200      	movs	r2, #0
 80005a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005a4:	489f      	ldr	r0, [pc, #636]	; (8000824 <display7SEG2+0x374>)
 80005a6:	f001 fa98 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_2_GPIO_Port, SEG2_2_Pin, 1);
 80005aa:	2201      	movs	r2, #1
 80005ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005b0:	489c      	ldr	r0, [pc, #624]	; (8000824 <display7SEG2+0x374>)
 80005b2:	f001 fa92 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_3_GPIO_Port, SEG2_3_Pin, 0);
 80005b6:	2200      	movs	r2, #0
 80005b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005bc:	4899      	ldr	r0, [pc, #612]	; (8000824 <display7SEG2+0x374>)
 80005be:	f001 fa8c 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_4_GPIO_Port, SEG2_4_Pin, 0);
 80005c2:	2200      	movs	r2, #0
 80005c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005c8:	4896      	ldr	r0, [pc, #600]	; (8000824 <display7SEG2+0x374>)
 80005ca:	f001 fa86 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_5_GPIO_Port, SEG2_5_Pin, 1);
 80005ce:	2201      	movs	r2, #1
 80005d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005d4:	4893      	ldr	r0, [pc, #588]	; (8000824 <display7SEG2+0x374>)
 80005d6:	f001 fa80 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_6_GPIO_Port, SEG2_6_Pin, 0);
 80005da:	2200      	movs	r2, #0
 80005dc:	2101      	movs	r1, #1
 80005de:	4892      	ldr	r0, [pc, #584]	; (8000828 <display7SEG2+0x378>)
 80005e0:	f001 fa7b 	bl	8001ada <HAL_GPIO_WritePin>
		break;
 80005e4:	e14b      	b.n	800087e <display7SEG2+0x3ce>
	case 3:
		HAL_GPIO_WritePin(SEG2_0_GPIO_Port, SEG2_0_Pin, 0);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2180      	movs	r1, #128	; 0x80
 80005ea:	488e      	ldr	r0, [pc, #568]	; (8000824 <display7SEG2+0x374>)
 80005ec:	f001 fa75 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_1_GPIO_Port, SEG2_1_Pin, 0);
 80005f0:	2200      	movs	r2, #0
 80005f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005f6:	488b      	ldr	r0, [pc, #556]	; (8000824 <display7SEG2+0x374>)
 80005f8:	f001 fa6f 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_2_GPIO_Port, SEG2_2_Pin, 0);
 80005fc:	2200      	movs	r2, #0
 80005fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000602:	4888      	ldr	r0, [pc, #544]	; (8000824 <display7SEG2+0x374>)
 8000604:	f001 fa69 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_3_GPIO_Port, SEG2_3_Pin, 0);
 8000608:	2200      	movs	r2, #0
 800060a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800060e:	4885      	ldr	r0, [pc, #532]	; (8000824 <display7SEG2+0x374>)
 8000610:	f001 fa63 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_4_GPIO_Port, SEG2_4_Pin, 1);
 8000614:	2201      	movs	r2, #1
 8000616:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800061a:	4882      	ldr	r0, [pc, #520]	; (8000824 <display7SEG2+0x374>)
 800061c:	f001 fa5d 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_5_GPIO_Port, SEG2_5_Pin, 1);
 8000620:	2201      	movs	r2, #1
 8000622:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000626:	487f      	ldr	r0, [pc, #508]	; (8000824 <display7SEG2+0x374>)
 8000628:	f001 fa57 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_6_GPIO_Port, SEG2_6_Pin, 0);
 800062c:	2200      	movs	r2, #0
 800062e:	2101      	movs	r1, #1
 8000630:	487d      	ldr	r0, [pc, #500]	; (8000828 <display7SEG2+0x378>)
 8000632:	f001 fa52 	bl	8001ada <HAL_GPIO_WritePin>
		break;
 8000636:	e122      	b.n	800087e <display7SEG2+0x3ce>
	case 4:
		HAL_GPIO_WritePin(SEG2_0_GPIO_Port, SEG2_0_Pin, 1);
 8000638:	2201      	movs	r2, #1
 800063a:	2180      	movs	r1, #128	; 0x80
 800063c:	4879      	ldr	r0, [pc, #484]	; (8000824 <display7SEG2+0x374>)
 800063e:	f001 fa4c 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_1_GPIO_Port, SEG2_1_Pin, 0);
 8000642:	2200      	movs	r2, #0
 8000644:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000648:	4876      	ldr	r0, [pc, #472]	; (8000824 <display7SEG2+0x374>)
 800064a:	f001 fa46 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_2_GPIO_Port, SEG2_2_Pin, 0);
 800064e:	2200      	movs	r2, #0
 8000650:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000654:	4873      	ldr	r0, [pc, #460]	; (8000824 <display7SEG2+0x374>)
 8000656:	f001 fa40 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_3_GPIO_Port, SEG2_3_Pin, 1);
 800065a:	2201      	movs	r2, #1
 800065c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000660:	4870      	ldr	r0, [pc, #448]	; (8000824 <display7SEG2+0x374>)
 8000662:	f001 fa3a 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_4_GPIO_Port, SEG2_4_Pin, 1);
 8000666:	2201      	movs	r2, #1
 8000668:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800066c:	486d      	ldr	r0, [pc, #436]	; (8000824 <display7SEG2+0x374>)
 800066e:	f001 fa34 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_5_GPIO_Port, SEG2_5_Pin, 0);
 8000672:	2200      	movs	r2, #0
 8000674:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000678:	486a      	ldr	r0, [pc, #424]	; (8000824 <display7SEG2+0x374>)
 800067a:	f001 fa2e 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_6_GPIO_Port, SEG2_6_Pin, 0);
 800067e:	2200      	movs	r2, #0
 8000680:	2101      	movs	r1, #1
 8000682:	4869      	ldr	r0, [pc, #420]	; (8000828 <display7SEG2+0x378>)
 8000684:	f001 fa29 	bl	8001ada <HAL_GPIO_WritePin>
		break;
 8000688:	e0f9      	b.n	800087e <display7SEG2+0x3ce>
	case 5:
		HAL_GPIO_WritePin(SEG2_0_GPIO_Port, SEG2_0_Pin, 0);
 800068a:	2200      	movs	r2, #0
 800068c:	2180      	movs	r1, #128	; 0x80
 800068e:	4865      	ldr	r0, [pc, #404]	; (8000824 <display7SEG2+0x374>)
 8000690:	f001 fa23 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_1_GPIO_Port, SEG2_1_Pin, 1);
 8000694:	2201      	movs	r2, #1
 8000696:	f44f 7180 	mov.w	r1, #256	; 0x100
 800069a:	4862      	ldr	r0, [pc, #392]	; (8000824 <display7SEG2+0x374>)
 800069c:	f001 fa1d 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_2_GPIO_Port, SEG2_2_Pin, 0);
 80006a0:	2200      	movs	r2, #0
 80006a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006a6:	485f      	ldr	r0, [pc, #380]	; (8000824 <display7SEG2+0x374>)
 80006a8:	f001 fa17 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_3_GPIO_Port, SEG2_3_Pin, 0);
 80006ac:	2200      	movs	r2, #0
 80006ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006b2:	485c      	ldr	r0, [pc, #368]	; (8000824 <display7SEG2+0x374>)
 80006b4:	f001 fa11 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_4_GPIO_Port, SEG2_4_Pin, 1);
 80006b8:	2201      	movs	r2, #1
 80006ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006be:	4859      	ldr	r0, [pc, #356]	; (8000824 <display7SEG2+0x374>)
 80006c0:	f001 fa0b 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_5_GPIO_Port, SEG2_5_Pin, 0);
 80006c4:	2200      	movs	r2, #0
 80006c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006ca:	4856      	ldr	r0, [pc, #344]	; (8000824 <display7SEG2+0x374>)
 80006cc:	f001 fa05 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_6_GPIO_Port, SEG2_6_Pin, 0);
 80006d0:	2200      	movs	r2, #0
 80006d2:	2101      	movs	r1, #1
 80006d4:	4854      	ldr	r0, [pc, #336]	; (8000828 <display7SEG2+0x378>)
 80006d6:	f001 fa00 	bl	8001ada <HAL_GPIO_WritePin>
		break;
 80006da:	e0d0      	b.n	800087e <display7SEG2+0x3ce>
	case 6:
		HAL_GPIO_WritePin(SEG2_0_GPIO_Port, SEG2_0_Pin, 0);
 80006dc:	2200      	movs	r2, #0
 80006de:	2180      	movs	r1, #128	; 0x80
 80006e0:	4850      	ldr	r0, [pc, #320]	; (8000824 <display7SEG2+0x374>)
 80006e2:	f001 f9fa 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_1_GPIO_Port, SEG2_1_Pin, 1);
 80006e6:	2201      	movs	r2, #1
 80006e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ec:	484d      	ldr	r0, [pc, #308]	; (8000824 <display7SEG2+0x374>)
 80006ee:	f001 f9f4 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_2_GPIO_Port, SEG2_2_Pin, 0);
 80006f2:	2200      	movs	r2, #0
 80006f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006f8:	484a      	ldr	r0, [pc, #296]	; (8000824 <display7SEG2+0x374>)
 80006fa:	f001 f9ee 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_3_GPIO_Port, SEG2_3_Pin, 0);
 80006fe:	2200      	movs	r2, #0
 8000700:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000704:	4847      	ldr	r0, [pc, #284]	; (8000824 <display7SEG2+0x374>)
 8000706:	f001 f9e8 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_4_GPIO_Port, SEG2_4_Pin, 0);
 800070a:	2200      	movs	r2, #0
 800070c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000710:	4844      	ldr	r0, [pc, #272]	; (8000824 <display7SEG2+0x374>)
 8000712:	f001 f9e2 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_5_GPIO_Port, SEG2_5_Pin, 0);
 8000716:	2200      	movs	r2, #0
 8000718:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800071c:	4841      	ldr	r0, [pc, #260]	; (8000824 <display7SEG2+0x374>)
 800071e:	f001 f9dc 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_6_GPIO_Port, SEG2_6_Pin, 0);
 8000722:	2200      	movs	r2, #0
 8000724:	2101      	movs	r1, #1
 8000726:	4840      	ldr	r0, [pc, #256]	; (8000828 <display7SEG2+0x378>)
 8000728:	f001 f9d7 	bl	8001ada <HAL_GPIO_WritePin>
		break;
 800072c:	e0a7      	b.n	800087e <display7SEG2+0x3ce>
	case 7:
		HAL_GPIO_WritePin(SEG2_0_GPIO_Port, SEG2_0_Pin, 0);
 800072e:	2200      	movs	r2, #0
 8000730:	2180      	movs	r1, #128	; 0x80
 8000732:	483c      	ldr	r0, [pc, #240]	; (8000824 <display7SEG2+0x374>)
 8000734:	f001 f9d1 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_1_GPIO_Port, SEG2_1_Pin, 0);
 8000738:	2200      	movs	r2, #0
 800073a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800073e:	4839      	ldr	r0, [pc, #228]	; (8000824 <display7SEG2+0x374>)
 8000740:	f001 f9cb 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_2_GPIO_Port, SEG2_2_Pin, 0);
 8000744:	2200      	movs	r2, #0
 8000746:	f44f 7100 	mov.w	r1, #512	; 0x200
 800074a:	4836      	ldr	r0, [pc, #216]	; (8000824 <display7SEG2+0x374>)
 800074c:	f001 f9c5 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_3_GPIO_Port, SEG2_3_Pin, 1);
 8000750:	2201      	movs	r2, #1
 8000752:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000756:	4833      	ldr	r0, [pc, #204]	; (8000824 <display7SEG2+0x374>)
 8000758:	f001 f9bf 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_4_GPIO_Port, SEG2_4_Pin, 1);
 800075c:	2201      	movs	r2, #1
 800075e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000762:	4830      	ldr	r0, [pc, #192]	; (8000824 <display7SEG2+0x374>)
 8000764:	f001 f9b9 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_5_GPIO_Port, SEG2_5_Pin, 1);
 8000768:	2201      	movs	r2, #1
 800076a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800076e:	482d      	ldr	r0, [pc, #180]	; (8000824 <display7SEG2+0x374>)
 8000770:	f001 f9b3 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_6_GPIO_Port, SEG2_6_Pin, 1);
 8000774:	2201      	movs	r2, #1
 8000776:	2101      	movs	r1, #1
 8000778:	482b      	ldr	r0, [pc, #172]	; (8000828 <display7SEG2+0x378>)
 800077a:	f001 f9ae 	bl	8001ada <HAL_GPIO_WritePin>
		break;
 800077e:	e07e      	b.n	800087e <display7SEG2+0x3ce>
	case 8:
		HAL_GPIO_WritePin(SEG2_0_GPIO_Port, SEG2_0_Pin, 0);
 8000780:	2200      	movs	r2, #0
 8000782:	2180      	movs	r1, #128	; 0x80
 8000784:	4827      	ldr	r0, [pc, #156]	; (8000824 <display7SEG2+0x374>)
 8000786:	f001 f9a8 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_1_GPIO_Port, SEG2_1_Pin, 0);
 800078a:	2200      	movs	r2, #0
 800078c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000790:	4824      	ldr	r0, [pc, #144]	; (8000824 <display7SEG2+0x374>)
 8000792:	f001 f9a2 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_2_GPIO_Port, SEG2_2_Pin, 0);
 8000796:	2200      	movs	r2, #0
 8000798:	f44f 7100 	mov.w	r1, #512	; 0x200
 800079c:	4821      	ldr	r0, [pc, #132]	; (8000824 <display7SEG2+0x374>)
 800079e:	f001 f99c 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_3_GPIO_Port, SEG2_3_Pin, 0);
 80007a2:	2200      	movs	r2, #0
 80007a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007a8:	481e      	ldr	r0, [pc, #120]	; (8000824 <display7SEG2+0x374>)
 80007aa:	f001 f996 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_4_GPIO_Port, SEG2_4_Pin, 0);
 80007ae:	2200      	movs	r2, #0
 80007b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007b4:	481b      	ldr	r0, [pc, #108]	; (8000824 <display7SEG2+0x374>)
 80007b6:	f001 f990 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_5_GPIO_Port, SEG2_5_Pin, 0);
 80007ba:	2200      	movs	r2, #0
 80007bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007c0:	4818      	ldr	r0, [pc, #96]	; (8000824 <display7SEG2+0x374>)
 80007c2:	f001 f98a 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_6_GPIO_Port, SEG2_6_Pin, 0);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2101      	movs	r1, #1
 80007ca:	4817      	ldr	r0, [pc, #92]	; (8000828 <display7SEG2+0x378>)
 80007cc:	f001 f985 	bl	8001ada <HAL_GPIO_WritePin>
		break;
 80007d0:	e055      	b.n	800087e <display7SEG2+0x3ce>
	case 9:
		HAL_GPIO_WritePin(SEG2_0_GPIO_Port, SEG2_0_Pin, 0);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2180      	movs	r1, #128	; 0x80
 80007d6:	4813      	ldr	r0, [pc, #76]	; (8000824 <display7SEG2+0x374>)
 80007d8:	f001 f97f 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_1_GPIO_Port, SEG2_1_Pin, 0);
 80007dc:	2200      	movs	r2, #0
 80007de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007e2:	4810      	ldr	r0, [pc, #64]	; (8000824 <display7SEG2+0x374>)
 80007e4:	f001 f979 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_2_GPIO_Port, SEG2_2_Pin, 0);
 80007e8:	2200      	movs	r2, #0
 80007ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007ee:	480d      	ldr	r0, [pc, #52]	; (8000824 <display7SEG2+0x374>)
 80007f0:	f001 f973 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_3_GPIO_Port, SEG2_3_Pin, 0);
 80007f4:	2200      	movs	r2, #0
 80007f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007fa:	480a      	ldr	r0, [pc, #40]	; (8000824 <display7SEG2+0x374>)
 80007fc:	f001 f96d 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_4_GPIO_Port, SEG2_4_Pin, 1);
 8000800:	2201      	movs	r2, #1
 8000802:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000806:	4807      	ldr	r0, [pc, #28]	; (8000824 <display7SEG2+0x374>)
 8000808:	f001 f967 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_5_GPIO_Port, SEG2_5_Pin, 0);
 800080c:	2200      	movs	r2, #0
 800080e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000812:	4804      	ldr	r0, [pc, #16]	; (8000824 <display7SEG2+0x374>)
 8000814:	f001 f961 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_6_GPIO_Port, SEG2_6_Pin, 0);
 8000818:	2200      	movs	r2, #0
 800081a:	2101      	movs	r1, #1
 800081c:	4802      	ldr	r0, [pc, #8]	; (8000828 <display7SEG2+0x378>)
 800081e:	f001 f95c 	bl	8001ada <HAL_GPIO_WritePin>
		break;
 8000822:	e02c      	b.n	800087e <display7SEG2+0x3ce>
 8000824:	40010800 	.word	0x40010800
 8000828:	40010c00 	.word	0x40010c00
	default:
		HAL_GPIO_WritePin(SEG2_0_GPIO_Port, SEG2_0_Pin, 1);
 800082c:	2201      	movs	r2, #1
 800082e:	2180      	movs	r1, #128	; 0x80
 8000830:	4815      	ldr	r0, [pc, #84]	; (8000888 <display7SEG2+0x3d8>)
 8000832:	f001 f952 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_1_GPIO_Port, SEG2_1_Pin, 1);
 8000836:	2201      	movs	r2, #1
 8000838:	f44f 7180 	mov.w	r1, #256	; 0x100
 800083c:	4812      	ldr	r0, [pc, #72]	; (8000888 <display7SEG2+0x3d8>)
 800083e:	f001 f94c 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_2_GPIO_Port, SEG2_2_Pin, 1);
 8000842:	2201      	movs	r2, #1
 8000844:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000848:	480f      	ldr	r0, [pc, #60]	; (8000888 <display7SEG2+0x3d8>)
 800084a:	f001 f946 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_3_GPIO_Port, SEG2_3_Pin, 1);
 800084e:	2201      	movs	r2, #1
 8000850:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000854:	480c      	ldr	r0, [pc, #48]	; (8000888 <display7SEG2+0x3d8>)
 8000856:	f001 f940 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_4_GPIO_Port, SEG2_4_Pin, 1);
 800085a:	2201      	movs	r2, #1
 800085c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000860:	4809      	ldr	r0, [pc, #36]	; (8000888 <display7SEG2+0x3d8>)
 8000862:	f001 f93a 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_5_GPIO_Port, SEG2_5_Pin, 1);
 8000866:	2201      	movs	r2, #1
 8000868:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800086c:	4806      	ldr	r0, [pc, #24]	; (8000888 <display7SEG2+0x3d8>)
 800086e:	f001 f934 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_6_GPIO_Port, SEG2_6_Pin, 1);
 8000872:	2201      	movs	r2, #1
 8000874:	2101      	movs	r1, #1
 8000876:	4805      	ldr	r0, [pc, #20]	; (800088c <display7SEG2+0x3dc>)
 8000878:	f001 f92f 	bl	8001ada <HAL_GPIO_WritePin>
		break;
 800087c:	bf00      	nop
	}
}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40010800 	.word	0x40010800
 800088c:	40010c00 	.word	0x40010c00

08000890 <fsm_mode_button1>:

void fsm_mode_button1() {
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
	switch (status_mode) {
 8000894:	4b21      	ldr	r3, [pc, #132]	; (800091c <fsm_mode_button1+0x8c>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	3b01      	subs	r3, #1
 800089a:	2b03      	cmp	r3, #3
 800089c:	d832      	bhi.n	8000904 <fsm_mode_button1+0x74>
 800089e:	a201      	add	r2, pc, #4	; (adr r2, 80008a4 <fsm_mode_button1+0x14>)
 80008a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008a4:	080008b5 	.word	0x080008b5
 80008a8:	080008c9 	.word	0x080008c9
 80008ac:	080008dd 	.word	0x080008dd
 80008b0:	080008f1 	.word	0x080008f1
	case MODE1:
		if (isButtonPressed(0)) {
 80008b4:	2000      	movs	r0, #0
 80008b6:	f000 fb8b 	bl	8000fd0 <isButtonPressed>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d023      	beq.n	8000908 <fsm_mode_button1+0x78>
			status_mode = MODE2;
 80008c0:	4b16      	ldr	r3, [pc, #88]	; (800091c <fsm_mode_button1+0x8c>)
 80008c2:	2202      	movs	r2, #2
 80008c4:	601a      	str	r2, [r3, #0]
		}
		break;
 80008c6:	e01f      	b.n	8000908 <fsm_mode_button1+0x78>
	case MODE2:
		if (isButtonPressed(0)) {
 80008c8:	2000      	movs	r0, #0
 80008ca:	f000 fb81 	bl	8000fd0 <isButtonPressed>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d01b      	beq.n	800090c <fsm_mode_button1+0x7c>
			status_mode = MODE3;
 80008d4:	4b11      	ldr	r3, [pc, #68]	; (800091c <fsm_mode_button1+0x8c>)
 80008d6:	2203      	movs	r2, #3
 80008d8:	601a      	str	r2, [r3, #0]
		}
		break;
 80008da:	e017      	b.n	800090c <fsm_mode_button1+0x7c>

	case MODE3:
		if (isButtonPressed(0)) {
 80008dc:	2000      	movs	r0, #0
 80008de:	f000 fb77 	bl	8000fd0 <isButtonPressed>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d013      	beq.n	8000910 <fsm_mode_button1+0x80>
			status_mode = MODE4;
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <fsm_mode_button1+0x8c>)
 80008ea:	2204      	movs	r2, #4
 80008ec:	601a      	str	r2, [r3, #0]
		}
		break;
 80008ee:	e00f      	b.n	8000910 <fsm_mode_button1+0x80>
	case MODE4:
		if (isButtonPressed(0)) {
 80008f0:	2000      	movs	r0, #0
 80008f2:	f000 fb6d 	bl	8000fd0 <isButtonPressed>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d00b      	beq.n	8000914 <fsm_mode_button1+0x84>
			status_mode = MODE1;
 80008fc:	4b07      	ldr	r3, [pc, #28]	; (800091c <fsm_mode_button1+0x8c>)
 80008fe:	2201      	movs	r2, #1
 8000900:	601a      	str	r2, [r3, #0]

		}
		break;
 8000902:	e007      	b.n	8000914 <fsm_mode_button1+0x84>
	default:
		break;
 8000904:	bf00      	nop
 8000906:	e006      	b.n	8000916 <fsm_mode_button1+0x86>
		break;
 8000908:	bf00      	nop
 800090a:	e004      	b.n	8000916 <fsm_mode_button1+0x86>
		break;
 800090c:	bf00      	nop
 800090e:	e002      	b.n	8000916 <fsm_mode_button1+0x86>
		break;
 8000910:	bf00      	nop
 8000912:	e000      	b.n	8000916 <fsm_mode_button1+0x86>
		break;
 8000914:	bf00      	nop
	}
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000000 	.word	0x20000000

08000920 <updateState>:

int updateState(){
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
	if(status_mode==MODE1){
 8000924:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <updateState+0x40>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2b01      	cmp	r3, #1
 800092a:	d101      	bne.n	8000930 <updateState+0x10>
		return 1;
 800092c:	2301      	movs	r3, #1
 800092e:	e013      	b.n	8000958 <updateState+0x38>
	}else if(status_mode==MODE2){
 8000930:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <updateState+0x40>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2b02      	cmp	r3, #2
 8000936:	d101      	bne.n	800093c <updateState+0x1c>
		return 2;
 8000938:	2302      	movs	r3, #2
 800093a:	e00d      	b.n	8000958 <updateState+0x38>
	}else if(status_mode==MODE3){
 800093c:	4b08      	ldr	r3, [pc, #32]	; (8000960 <updateState+0x40>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b03      	cmp	r3, #3
 8000942:	d101      	bne.n	8000948 <updateState+0x28>
		return 3;
 8000944:	2303      	movs	r3, #3
 8000946:	e007      	b.n	8000958 <updateState+0x38>
	}else if(status_mode==MODE4){
 8000948:	4b05      	ldr	r3, [pc, #20]	; (8000960 <updateState+0x40>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2b04      	cmp	r3, #4
 800094e:	d101      	bne.n	8000954 <updateState+0x34>
		return 4;
 8000950:	2304      	movs	r3, #4
 8000952:	e001      	b.n	8000958 <updateState+0x38>
	}else{
		return -1;
 8000954:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8000958:	4618      	mov	r0, r3
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr
 8000960:	20000000 	.word	0x20000000

08000964 <fsm_mode_button2>:

void fsm_mode_button2() {
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
	switch (status_mode) {
 8000968:	4b48      	ldr	r3, [pc, #288]	; (8000a8c <fsm_mode_button2+0x128>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	3b01      	subs	r3, #1
 800096e:	2b03      	cmp	r3, #3
 8000970:	f200 8088 	bhi.w	8000a84 <fsm_mode_button2+0x120>
 8000974:	a201      	add	r2, pc, #4	; (adr r2, 800097c <fsm_mode_button2+0x18>)
 8000976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800097a:	bf00      	nop
 800097c:	0800098d 	.word	0x0800098d
 8000980:	080009a7 	.word	0x080009a7
 8000984:	080009f1 	.word	0x080009f1
 8000988:	08000a3b 	.word	0x08000a3b
	case MODE1:
		led_count[0] = final_led_count[0];
 800098c:	4b40      	ldr	r3, [pc, #256]	; (8000a90 <fsm_mode_button2+0x12c>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a40      	ldr	r2, [pc, #256]	; (8000a94 <fsm_mode_button2+0x130>)
 8000992:	6013      	str	r3, [r2, #0]
		led_count[1] = final_led_count[1];
 8000994:	4b3e      	ldr	r3, [pc, #248]	; (8000a90 <fsm_mode_button2+0x12c>)
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	4a3e      	ldr	r2, [pc, #248]	; (8000a94 <fsm_mode_button2+0x130>)
 800099a:	6053      	str	r3, [r2, #4]
		led_count[2] = final_led_count[2];
 800099c:	4b3c      	ldr	r3, [pc, #240]	; (8000a90 <fsm_mode_button2+0x12c>)
 800099e:	689b      	ldr	r3, [r3, #8]
 80009a0:	4a3c      	ldr	r2, [pc, #240]	; (8000a94 <fsm_mode_button2+0x130>)
 80009a2:	6093      	str	r3, [r2, #8]
		break;
 80009a4:	e06f      	b.n	8000a86 <fsm_mode_button2+0x122>
	case MODE2:
		if (isButtonPressed(1)) {
 80009a6:	2001      	movs	r0, #1
 80009a8:	f000 fb12 	bl	8000fd0 <isButtonPressed>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d004      	beq.n	80009bc <fsm_mode_button2+0x58>
			led_count[0]++;
 80009b2:	4b38      	ldr	r3, [pc, #224]	; (8000a94 <fsm_mode_button2+0x130>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	3301      	adds	r3, #1
 80009b8:	4a36      	ldr	r2, [pc, #216]	; (8000a94 <fsm_mode_button2+0x130>)
 80009ba:	6013      	str	r3, [r2, #0]
		}
		buffer_led[0] = led_count[0] / 10;
 80009bc:	4b35      	ldr	r3, [pc, #212]	; (8000a94 <fsm_mode_button2+0x130>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a35      	ldr	r2, [pc, #212]	; (8000a98 <fsm_mode_button2+0x134>)
 80009c2:	fb82 1203 	smull	r1, r2, r2, r3
 80009c6:	1092      	asrs	r2, r2, #2
 80009c8:	17db      	asrs	r3, r3, #31
 80009ca:	1ad3      	subs	r3, r2, r3
 80009cc:	4a33      	ldr	r2, [pc, #204]	; (8000a9c <fsm_mode_button2+0x138>)
 80009ce:	6013      	str	r3, [r2, #0]
		buffer_led[1] = led_count[0] % 10;
 80009d0:	4b30      	ldr	r3, [pc, #192]	; (8000a94 <fsm_mode_button2+0x130>)
 80009d2:	6819      	ldr	r1, [r3, #0]
 80009d4:	4b30      	ldr	r3, [pc, #192]	; (8000a98 <fsm_mode_button2+0x134>)
 80009d6:	fb83 2301 	smull	r2, r3, r3, r1
 80009da:	109a      	asrs	r2, r3, #2
 80009dc:	17cb      	asrs	r3, r1, #31
 80009de:	1ad2      	subs	r2, r2, r3
 80009e0:	4613      	mov	r3, r2
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	4413      	add	r3, r2
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	1aca      	subs	r2, r1, r3
 80009ea:	4b2c      	ldr	r3, [pc, #176]	; (8000a9c <fsm_mode_button2+0x138>)
 80009ec:	605a      	str	r2, [r3, #4]
		break;
 80009ee:	e04a      	b.n	8000a86 <fsm_mode_button2+0x122>

	case MODE3:
		if (isButtonPressed(1)) {
 80009f0:	2001      	movs	r0, #1
 80009f2:	f000 faed 	bl	8000fd0 <isButtonPressed>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d004      	beq.n	8000a06 <fsm_mode_button2+0xa2>
			led_count[1]++;
 80009fc:	4b25      	ldr	r3, [pc, #148]	; (8000a94 <fsm_mode_button2+0x130>)
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	3301      	adds	r3, #1
 8000a02:	4a24      	ldr	r2, [pc, #144]	; (8000a94 <fsm_mode_button2+0x130>)
 8000a04:	6053      	str	r3, [r2, #4]
		}
		buffer_led[0] = led_count[1] / 10;
 8000a06:	4b23      	ldr	r3, [pc, #140]	; (8000a94 <fsm_mode_button2+0x130>)
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	4a23      	ldr	r2, [pc, #140]	; (8000a98 <fsm_mode_button2+0x134>)
 8000a0c:	fb82 1203 	smull	r1, r2, r2, r3
 8000a10:	1092      	asrs	r2, r2, #2
 8000a12:	17db      	asrs	r3, r3, #31
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	4a21      	ldr	r2, [pc, #132]	; (8000a9c <fsm_mode_button2+0x138>)
 8000a18:	6013      	str	r3, [r2, #0]
		buffer_led[1] = led_count[1] % 10;
 8000a1a:	4b1e      	ldr	r3, [pc, #120]	; (8000a94 <fsm_mode_button2+0x130>)
 8000a1c:	6859      	ldr	r1, [r3, #4]
 8000a1e:	4b1e      	ldr	r3, [pc, #120]	; (8000a98 <fsm_mode_button2+0x134>)
 8000a20:	fb83 2301 	smull	r2, r3, r3, r1
 8000a24:	109a      	asrs	r2, r3, #2
 8000a26:	17cb      	asrs	r3, r1, #31
 8000a28:	1ad2      	subs	r2, r2, r3
 8000a2a:	4613      	mov	r3, r2
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	4413      	add	r3, r2
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	1aca      	subs	r2, r1, r3
 8000a34:	4b19      	ldr	r3, [pc, #100]	; (8000a9c <fsm_mode_button2+0x138>)
 8000a36:	605a      	str	r2, [r3, #4]
		break;
 8000a38:	e025      	b.n	8000a86 <fsm_mode_button2+0x122>
	case MODE4:
		if (isButtonPressed(1)) {
 8000a3a:	2001      	movs	r0, #1
 8000a3c:	f000 fac8 	bl	8000fd0 <isButtonPressed>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d004      	beq.n	8000a50 <fsm_mode_button2+0xec>
			led_count[2]++;
 8000a46:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <fsm_mode_button2+0x130>)
 8000a48:	689b      	ldr	r3, [r3, #8]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	4a11      	ldr	r2, [pc, #68]	; (8000a94 <fsm_mode_button2+0x130>)
 8000a4e:	6093      	str	r3, [r2, #8]
		}
		buffer_led[0] = led_count[2] / 10;
 8000a50:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <fsm_mode_button2+0x130>)
 8000a52:	689b      	ldr	r3, [r3, #8]
 8000a54:	4a10      	ldr	r2, [pc, #64]	; (8000a98 <fsm_mode_button2+0x134>)
 8000a56:	fb82 1203 	smull	r1, r2, r2, r3
 8000a5a:	1092      	asrs	r2, r2, #2
 8000a5c:	17db      	asrs	r3, r3, #31
 8000a5e:	1ad3      	subs	r3, r2, r3
 8000a60:	4a0e      	ldr	r2, [pc, #56]	; (8000a9c <fsm_mode_button2+0x138>)
 8000a62:	6013      	str	r3, [r2, #0]
		buffer_led[1] = led_count[2] % 10;
 8000a64:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <fsm_mode_button2+0x130>)
 8000a66:	6899      	ldr	r1, [r3, #8]
 8000a68:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <fsm_mode_button2+0x134>)
 8000a6a:	fb83 2301 	smull	r2, r3, r3, r1
 8000a6e:	109a      	asrs	r2, r3, #2
 8000a70:	17cb      	asrs	r3, r1, #31
 8000a72:	1ad2      	subs	r2, r2, r3
 8000a74:	4613      	mov	r3, r2
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	4413      	add	r3, r2
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	1aca      	subs	r2, r1, r3
 8000a7e:	4b07      	ldr	r3, [pc, #28]	; (8000a9c <fsm_mode_button2+0x138>)
 8000a80:	605a      	str	r2, [r3, #4]
		break;
 8000a82:	e000      	b.n	8000a86 <fsm_mode_button2+0x122>
	default:
		break;
 8000a84:	bf00      	nop
	}
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000000 	.word	0x20000000
 8000a90:	20000010 	.word	0x20000010
 8000a94:	20000004 	.word	0x20000004
 8000a98:	66666667 	.word	0x66666667
 8000a9c:	20000054 	.word	0x20000054

08000aa0 <fsm_mode_button3>:
void fsm_mode_button3() {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
	switch (status_mode) {
 8000aa4:	4b1a      	ldr	r3, [pc, #104]	; (8000b10 <fsm_mode_button3+0x70>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2b04      	cmp	r3, #4
 8000aaa:	d01c      	beq.n	8000ae6 <fsm_mode_button3+0x46>
 8000aac:	2b04      	cmp	r3, #4
 8000aae:	dc25      	bgt.n	8000afc <fsm_mode_button3+0x5c>
 8000ab0:	2b02      	cmp	r3, #2
 8000ab2:	d002      	beq.n	8000aba <fsm_mode_button3+0x1a>
 8000ab4:	2b03      	cmp	r3, #3
 8000ab6:	d00b      	beq.n	8000ad0 <fsm_mode_button3+0x30>
		if (isButtonPressed(2)) {
			final_led_count[2] = led_count[2];
		}
		break;
	default:
		break;
 8000ab8:	e020      	b.n	8000afc <fsm_mode_button3+0x5c>
		if (isButtonPressed(2)) {
 8000aba:	2002      	movs	r0, #2
 8000abc:	f000 fa88 	bl	8000fd0 <isButtonPressed>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d01c      	beq.n	8000b00 <fsm_mode_button3+0x60>
			final_led_count[0] = led_count[0];
 8000ac6:	4b13      	ldr	r3, [pc, #76]	; (8000b14 <fsm_mode_button3+0x74>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a13      	ldr	r2, [pc, #76]	; (8000b18 <fsm_mode_button3+0x78>)
 8000acc:	6013      	str	r3, [r2, #0]
		break;
 8000ace:	e017      	b.n	8000b00 <fsm_mode_button3+0x60>
		if (isButtonPressed(2)) {
 8000ad0:	2002      	movs	r0, #2
 8000ad2:	f000 fa7d 	bl	8000fd0 <isButtonPressed>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d013      	beq.n	8000b04 <fsm_mode_button3+0x64>
			final_led_count[1] = led_count[1];
 8000adc:	4b0d      	ldr	r3, [pc, #52]	; (8000b14 <fsm_mode_button3+0x74>)
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	4a0d      	ldr	r2, [pc, #52]	; (8000b18 <fsm_mode_button3+0x78>)
 8000ae2:	6053      	str	r3, [r2, #4]
		break;
 8000ae4:	e00e      	b.n	8000b04 <fsm_mode_button3+0x64>
		if (isButtonPressed(2)) {
 8000ae6:	2002      	movs	r0, #2
 8000ae8:	f000 fa72 	bl	8000fd0 <isButtonPressed>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d00a      	beq.n	8000b08 <fsm_mode_button3+0x68>
			final_led_count[2] = led_count[2];
 8000af2:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <fsm_mode_button3+0x74>)
 8000af4:	689b      	ldr	r3, [r3, #8]
 8000af6:	4a08      	ldr	r2, [pc, #32]	; (8000b18 <fsm_mode_button3+0x78>)
 8000af8:	6093      	str	r3, [r2, #8]
		break;
 8000afa:	e005      	b.n	8000b08 <fsm_mode_button3+0x68>
		break;
 8000afc:	bf00      	nop
 8000afe:	e004      	b.n	8000b0a <fsm_mode_button3+0x6a>
		break;
 8000b00:	bf00      	nop
 8000b02:	e002      	b.n	8000b0a <fsm_mode_button3+0x6a>
		break;
 8000b04:	bf00      	nop
 8000b06:	e000      	b.n	8000b0a <fsm_mode_button3+0x6a>
		break;
 8000b08:	bf00      	nop
	}
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000000 	.word	0x20000000
 8000b14:	20000004 	.word	0x20000004
 8000b18:	20000010 	.word	0x20000010

08000b1c <led_blink>:

void led_blink() {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
	if (status_mode == MODE2) {
 8000b20:	4b31      	ldr	r3, [pc, #196]	; (8000be8 <led_blink+0xcc>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2b02      	cmp	r3, #2
 8000b26:	d11c      	bne.n	8000b62 <led_blink+0x46>
		HAL_GPIO_TogglePin(TRAFFIC_RED_GPIO_Port, TRAFFIC_RED_Pin);
 8000b28:	2108      	movs	r1, #8
 8000b2a:	4830      	ldr	r0, [pc, #192]	; (8000bec <led_blink+0xd0>)
 8000b2c:	f000 ffed 	bl	8001b0a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(TRAFFIC2_RED_GPIO_Port, TRAFFIC2_RED_Pin);
 8000b30:	2140      	movs	r1, #64	; 0x40
 8000b32:	482e      	ldr	r0, [pc, #184]	; (8000bec <led_blink+0xd0>)
 8000b34:	f000 ffe9 	bl	8001b0a <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(TRAFFIC_AMBER_GPIO_Port, TRAFFIC_AMBER_Pin, 1);
 8000b38:	2201      	movs	r2, #1
 8000b3a:	2104      	movs	r1, #4
 8000b3c:	482b      	ldr	r0, [pc, #172]	; (8000bec <led_blink+0xd0>)
 8000b3e:	f000 ffcc 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TRAFFIC2_AMBER_GPIO_Port, TRAFFIC2_AMBER_Pin, 1);
 8000b42:	2201      	movs	r2, #1
 8000b44:	2120      	movs	r1, #32
 8000b46:	4829      	ldr	r0, [pc, #164]	; (8000bec <led_blink+0xd0>)
 8000b48:	f000 ffc7 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TRAFFIC_GREEN_GPIO_Port, TRAFFIC_GREEN_Pin, 1);
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	2102      	movs	r1, #2
 8000b50:	4826      	ldr	r0, [pc, #152]	; (8000bec <led_blink+0xd0>)
 8000b52:	f000 ffc2 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TRAFFIC2_GREEN_GPIO_Port, TRAFFIC2_GREEN_Pin, 1);
 8000b56:	2201      	movs	r2, #1
 8000b58:	2110      	movs	r1, #16
 8000b5a:	4824      	ldr	r0, [pc, #144]	; (8000bec <led_blink+0xd0>)
 8000b5c:	f000 ffbd 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TRAFFIC_AMBER_GPIO_Port, TRAFFIC_AMBER_Pin, 1);
		HAL_GPIO_WritePin(TRAFFIC2_AMBER_GPIO_Port, TRAFFIC2_AMBER_Pin, 1);
		HAL_GPIO_WritePin(TRAFFIC_RED_GPIO_Port, TRAFFIC_RED_Pin, 1);
		HAL_GPIO_WritePin(TRAFFIC2_RED_GPIO_Port, TRAFFIC2_RED_Pin, 1);
	}
}
 8000b60:	e040      	b.n	8000be4 <led_blink+0xc8>
	} else if (status_mode == MODE3) {
 8000b62:	4b21      	ldr	r3, [pc, #132]	; (8000be8 <led_blink+0xcc>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	2b03      	cmp	r3, #3
 8000b68:	d11c      	bne.n	8000ba4 <led_blink+0x88>
		HAL_GPIO_TogglePin(TRAFFIC_AMBER_GPIO_Port, TRAFFIC_AMBER_Pin);
 8000b6a:	2104      	movs	r1, #4
 8000b6c:	481f      	ldr	r0, [pc, #124]	; (8000bec <led_blink+0xd0>)
 8000b6e:	f000 ffcc 	bl	8001b0a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(TRAFFIC2_AMBER_GPIO_Port, TRAFFIC2_AMBER_Pin);
 8000b72:	2120      	movs	r1, #32
 8000b74:	481d      	ldr	r0, [pc, #116]	; (8000bec <led_blink+0xd0>)
 8000b76:	f000 ffc8 	bl	8001b0a <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(TRAFFIC_RED_GPIO_Port, TRAFFIC_RED_Pin, 1);
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	2108      	movs	r1, #8
 8000b7e:	481b      	ldr	r0, [pc, #108]	; (8000bec <led_blink+0xd0>)
 8000b80:	f000 ffab 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TRAFFIC2_RED_GPIO_Port, TRAFFIC2_RED_Pin, 1);
 8000b84:	2201      	movs	r2, #1
 8000b86:	2140      	movs	r1, #64	; 0x40
 8000b88:	4818      	ldr	r0, [pc, #96]	; (8000bec <led_blink+0xd0>)
 8000b8a:	f000 ffa6 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TRAFFIC_GREEN_GPIO_Port, TRAFFIC_GREEN_Pin, 1);
 8000b8e:	2201      	movs	r2, #1
 8000b90:	2102      	movs	r1, #2
 8000b92:	4816      	ldr	r0, [pc, #88]	; (8000bec <led_blink+0xd0>)
 8000b94:	f000 ffa1 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TRAFFIC2_GREEN_GPIO_Port, TRAFFIC2_GREEN_Pin, 1);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	2110      	movs	r1, #16
 8000b9c:	4813      	ldr	r0, [pc, #76]	; (8000bec <led_blink+0xd0>)
 8000b9e:	f000 ff9c 	bl	8001ada <HAL_GPIO_WritePin>
}
 8000ba2:	e01f      	b.n	8000be4 <led_blink+0xc8>
	} else if (status_mode == MODE4) {
 8000ba4:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <led_blink+0xcc>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b04      	cmp	r3, #4
 8000baa:	d11b      	bne.n	8000be4 <led_blink+0xc8>
		HAL_GPIO_TogglePin(TRAFFIC_GREEN_GPIO_Port, TRAFFIC_GREEN_Pin);
 8000bac:	2102      	movs	r1, #2
 8000bae:	480f      	ldr	r0, [pc, #60]	; (8000bec <led_blink+0xd0>)
 8000bb0:	f000 ffab 	bl	8001b0a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(TRAFFIC2_GREEN_GPIO_Port, TRAFFIC2_GREEN_Pin);
 8000bb4:	2110      	movs	r1, #16
 8000bb6:	480d      	ldr	r0, [pc, #52]	; (8000bec <led_blink+0xd0>)
 8000bb8:	f000 ffa7 	bl	8001b0a <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(TRAFFIC_AMBER_GPIO_Port, TRAFFIC_AMBER_Pin, 1);
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	2104      	movs	r1, #4
 8000bc0:	480a      	ldr	r0, [pc, #40]	; (8000bec <led_blink+0xd0>)
 8000bc2:	f000 ff8a 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TRAFFIC2_AMBER_GPIO_Port, TRAFFIC2_AMBER_Pin, 1);
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	2120      	movs	r1, #32
 8000bca:	4808      	ldr	r0, [pc, #32]	; (8000bec <led_blink+0xd0>)
 8000bcc:	f000 ff85 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TRAFFIC_RED_GPIO_Port, TRAFFIC_RED_Pin, 1);
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	2108      	movs	r1, #8
 8000bd4:	4805      	ldr	r0, [pc, #20]	; (8000bec <led_blink+0xd0>)
 8000bd6:	f000 ff80 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TRAFFIC2_RED_GPIO_Port, TRAFFIC2_RED_Pin, 1);
 8000bda:	2201      	movs	r2, #1
 8000bdc:	2140      	movs	r1, #64	; 0x40
 8000bde:	4803      	ldr	r0, [pc, #12]	; (8000bec <led_blink+0xd0>)
 8000be0:	f000 ff7b 	bl	8001ada <HAL_GPIO_WritePin>
}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000000 	.word	0x20000000
 8000bec:	40010800 	.word	0x40010800

08000bf0 <display_set_value>:

void display_set_value() {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
	switch (index00 % 2) {
 8000bf4:	4b1d      	ldr	r3, [pc, #116]	; (8000c6c <display_set_value+0x7c>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	bfb8      	it	lt
 8000c00:	425b      	neglt	r3, r3
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d002      	beq.n	8000c0c <display_set_value+0x1c>
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d017      	beq.n	8000c3a <display_set_value+0x4a>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
		display7SEG1(buffer_led[0]);
		index00++;
		break;
	default:
		break;
 8000c0a:	e02d      	b.n	8000c68 <display_set_value+0x78>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c12:	4817      	ldr	r0, [pc, #92]	; (8000c70 <display_set_value+0x80>)
 8000c14:	f000 ff61 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c1e:	4814      	ldr	r0, [pc, #80]	; (8000c70 <display_set_value+0x80>)
 8000c20:	f000 ff5b 	bl	8001ada <HAL_GPIO_WritePin>
		display7SEG1(buffer_led[1]);
 8000c24:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <display_set_value+0x84>)
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff fa8f 	bl	800014c <display7SEG1>
		index00++;
 8000c2e:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <display_set_value+0x7c>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	3301      	adds	r3, #1
 8000c34:	4a0d      	ldr	r2, [pc, #52]	; (8000c6c <display_set_value+0x7c>)
 8000c36:	6013      	str	r3, [r2, #0]
		break;
 8000c38:	e016      	b.n	8000c68 <display_set_value+0x78>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c40:	480b      	ldr	r0, [pc, #44]	; (8000c70 <display_set_value+0x80>)
 8000c42:	f000 ff4a 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8000c46:	2201      	movs	r2, #1
 8000c48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c4c:	4808      	ldr	r0, [pc, #32]	; (8000c70 <display_set_value+0x80>)
 8000c4e:	f000 ff44 	bl	8001ada <HAL_GPIO_WritePin>
		display7SEG1(buffer_led[0]);
 8000c52:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <display_set_value+0x84>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff fa78 	bl	800014c <display7SEG1>
		index00++;
 8000c5c:	4b03      	ldr	r3, [pc, #12]	; (8000c6c <display_set_value+0x7c>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	3301      	adds	r3, #1
 8000c62:	4a02      	ldr	r2, [pc, #8]	; (8000c6c <display_set_value+0x7c>)
 8000c64:	6013      	str	r3, [r2, #0]
		break;
 8000c66:	bf00      	nop
	}
}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	2000005c 	.word	0x2000005c
 8000c70:	40010c00 	.word	0x40010c00
 8000c74:	20000054 	.word	0x20000054

08000c78 <fsm_traffic_led>:

void fsm_traffic_led() {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
	if (status_mode == MODE1) {
 8000c7c:	4b8f      	ldr	r3, [pc, #572]	; (8000ebc <fsm_traffic_led+0x244>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	f040 8118 	bne.w	8000eb6 <fsm_traffic_led+0x23e>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
 8000c86:	2200      	movs	r2, #0
 8000c88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c8c:	488c      	ldr	r0, [pc, #560]	; (8000ec0 <fsm_traffic_led+0x248>)
 8000c8e:	f000 ff24 	bl	8001ada <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 8000c92:	2200      	movs	r2, #0
 8000c94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c98:	4889      	ldr	r0, [pc, #548]	; (8000ec0 <fsm_traffic_led+0x248>)
 8000c9a:	f000 ff1e 	bl	8001ada <HAL_GPIO_WritePin>
		if (state_led[0] == 0) {
 8000c9e:	4b89      	ldr	r3, [pc, #548]	; (8000ec4 <fsm_traffic_led+0x24c>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d128      	bne.n	8000cf8 <fsm_traffic_led+0x80>
			HAL_GPIO_WritePin(TRAFFIC_RED_GPIO_Port, TRAFFIC_RED_Pin, 0);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2108      	movs	r1, #8
 8000caa:	4887      	ldr	r0, [pc, #540]	; (8000ec8 <fsm_traffic_led+0x250>)
 8000cac:	f000 ff15 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TRAFFIC_AMBER_GPIO_Port, TRAFFIC_AMBER_Pin, 1);
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	2104      	movs	r1, #4
 8000cb4:	4884      	ldr	r0, [pc, #528]	; (8000ec8 <fsm_traffic_led+0x250>)
 8000cb6:	f000 ff10 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TRAFFIC_GREEN_GPIO_Port, TRAFFIC_GREEN_Pin, 1);
 8000cba:	2201      	movs	r2, #1
 8000cbc:	2102      	movs	r1, #2
 8000cbe:	4882      	ldr	r0, [pc, #520]	; (8000ec8 <fsm_traffic_led+0x250>)
 8000cc0:	f000 ff0b 	bl	8001ada <HAL_GPIO_WritePin>
			display7SEG1(final_led_count[0] - index_led[0]);
 8000cc4:	4b81      	ldr	r3, [pc, #516]	; (8000ecc <fsm_traffic_led+0x254>)
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	4b81      	ldr	r3, [pc, #516]	; (8000ed0 <fsm_traffic_led+0x258>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff fa3c 	bl	800014c <display7SEG1>
			index_led[0]++;
 8000cd4:	4b7e      	ldr	r3, [pc, #504]	; (8000ed0 <fsm_traffic_led+0x258>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	4a7d      	ldr	r2, [pc, #500]	; (8000ed0 <fsm_traffic_led+0x258>)
 8000cdc:	6013      	str	r3, [r2, #0]
			if (final_led_count[0] == index_led[0]) {
 8000cde:	4b7b      	ldr	r3, [pc, #492]	; (8000ecc <fsm_traffic_led+0x254>)
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	4b7b      	ldr	r3, [pc, #492]	; (8000ed0 <fsm_traffic_led+0x258>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d15f      	bne.n	8000daa <fsm_traffic_led+0x132>
				index_led[0] = 0;
 8000cea:	4b79      	ldr	r3, [pc, #484]	; (8000ed0 <fsm_traffic_led+0x258>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
				state_led[0] = 2;
 8000cf0:	4b74      	ldr	r3, [pc, #464]	; (8000ec4 <fsm_traffic_led+0x24c>)
 8000cf2:	2202      	movs	r2, #2
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	e058      	b.n	8000daa <fsm_traffic_led+0x132>
			}
		} else if (state_led[0] == 1) {
 8000cf8:	4b72      	ldr	r3, [pc, #456]	; (8000ec4 <fsm_traffic_led+0x24c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d128      	bne.n	8000d52 <fsm_traffic_led+0xda>
			HAL_GPIO_WritePin(TRAFFIC_RED_GPIO_Port, TRAFFIC_RED_Pin, 1);
 8000d00:	2201      	movs	r2, #1
 8000d02:	2108      	movs	r1, #8
 8000d04:	4870      	ldr	r0, [pc, #448]	; (8000ec8 <fsm_traffic_led+0x250>)
 8000d06:	f000 fee8 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TRAFFIC_AMBER_GPIO_Port, TRAFFIC_AMBER_Pin, 0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2104      	movs	r1, #4
 8000d0e:	486e      	ldr	r0, [pc, #440]	; (8000ec8 <fsm_traffic_led+0x250>)
 8000d10:	f000 fee3 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TRAFFIC_GREEN_GPIO_Port, TRAFFIC_GREEN_Pin, 1);
 8000d14:	2201      	movs	r2, #1
 8000d16:	2102      	movs	r1, #2
 8000d18:	486b      	ldr	r0, [pc, #428]	; (8000ec8 <fsm_traffic_led+0x250>)
 8000d1a:	f000 fede 	bl	8001ada <HAL_GPIO_WritePin>
			display7SEG1(final_led_count[1] - index_led[0]);
 8000d1e:	4b6b      	ldr	r3, [pc, #428]	; (8000ecc <fsm_traffic_led+0x254>)
 8000d20:	685a      	ldr	r2, [r3, #4]
 8000d22:	4b6b      	ldr	r3, [pc, #428]	; (8000ed0 <fsm_traffic_led+0x258>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	1ad3      	subs	r3, r2, r3
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff fa0f 	bl	800014c <display7SEG1>
			index_led[0]++;
 8000d2e:	4b68      	ldr	r3, [pc, #416]	; (8000ed0 <fsm_traffic_led+0x258>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	3301      	adds	r3, #1
 8000d34:	4a66      	ldr	r2, [pc, #408]	; (8000ed0 <fsm_traffic_led+0x258>)
 8000d36:	6013      	str	r3, [r2, #0]
			if (final_led_count[1] == index_led[0]) {
 8000d38:	4b64      	ldr	r3, [pc, #400]	; (8000ecc <fsm_traffic_led+0x254>)
 8000d3a:	685a      	ldr	r2, [r3, #4]
 8000d3c:	4b64      	ldr	r3, [pc, #400]	; (8000ed0 <fsm_traffic_led+0x258>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d132      	bne.n	8000daa <fsm_traffic_led+0x132>
				index_led[0] = 0;
 8000d44:	4b62      	ldr	r3, [pc, #392]	; (8000ed0 <fsm_traffic_led+0x258>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
				state_led[0] = 0;
 8000d4a:	4b5e      	ldr	r3, [pc, #376]	; (8000ec4 <fsm_traffic_led+0x24c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	e02b      	b.n	8000daa <fsm_traffic_led+0x132>
			}
		} else if (state_led[0] == 2) {
 8000d52:	4b5c      	ldr	r3, [pc, #368]	; (8000ec4 <fsm_traffic_led+0x24c>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2b02      	cmp	r3, #2
 8000d58:	d127      	bne.n	8000daa <fsm_traffic_led+0x132>
			HAL_GPIO_WritePin(TRAFFIC_RED_GPIO_Port, TRAFFIC_RED_Pin, 1);
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	2108      	movs	r1, #8
 8000d5e:	485a      	ldr	r0, [pc, #360]	; (8000ec8 <fsm_traffic_led+0x250>)
 8000d60:	f000 febb 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TRAFFIC_AMBER_GPIO_Port, TRAFFIC_AMBER_Pin, 1);
 8000d64:	2201      	movs	r2, #1
 8000d66:	2104      	movs	r1, #4
 8000d68:	4857      	ldr	r0, [pc, #348]	; (8000ec8 <fsm_traffic_led+0x250>)
 8000d6a:	f000 feb6 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TRAFFIC_GREEN_GPIO_Port, TRAFFIC_GREEN_Pin, 0);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2102      	movs	r1, #2
 8000d72:	4855      	ldr	r0, [pc, #340]	; (8000ec8 <fsm_traffic_led+0x250>)
 8000d74:	f000 feb1 	bl	8001ada <HAL_GPIO_WritePin>
			display7SEG1(final_led_count[2] - index_led[0]);
 8000d78:	4b54      	ldr	r3, [pc, #336]	; (8000ecc <fsm_traffic_led+0x254>)
 8000d7a:	689a      	ldr	r2, [r3, #8]
 8000d7c:	4b54      	ldr	r3, [pc, #336]	; (8000ed0 <fsm_traffic_led+0x258>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff f9e2 	bl	800014c <display7SEG1>
			index_led[0]++;
 8000d88:	4b51      	ldr	r3, [pc, #324]	; (8000ed0 <fsm_traffic_led+0x258>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	4a50      	ldr	r2, [pc, #320]	; (8000ed0 <fsm_traffic_led+0x258>)
 8000d90:	6013      	str	r3, [r2, #0]
			if (final_led_count[2] == index_led[0]) {
 8000d92:	4b4e      	ldr	r3, [pc, #312]	; (8000ecc <fsm_traffic_led+0x254>)
 8000d94:	689a      	ldr	r2, [r3, #8]
 8000d96:	4b4e      	ldr	r3, [pc, #312]	; (8000ed0 <fsm_traffic_led+0x258>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d105      	bne.n	8000daa <fsm_traffic_led+0x132>
				index_led[0] = 0;
 8000d9e:	4b4c      	ldr	r3, [pc, #304]	; (8000ed0 <fsm_traffic_led+0x258>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
				state_led[0] = 1;
 8000da4:	4b47      	ldr	r3, [pc, #284]	; (8000ec4 <fsm_traffic_led+0x24c>)
 8000da6:	2201      	movs	r2, #1
 8000da8:	601a      	str	r2, [r3, #0]
			}
		}
		if (state_led[1] == 2) {
 8000daa:	4b46      	ldr	r3, [pc, #280]	; (8000ec4 <fsm_traffic_led+0x24c>)
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d128      	bne.n	8000e04 <fsm_traffic_led+0x18c>
			HAL_GPIO_WritePin(TRAFFIC2_RED_GPIO_Port, TRAFFIC2_RED_Pin, 1);
 8000db2:	2201      	movs	r2, #1
 8000db4:	2140      	movs	r1, #64	; 0x40
 8000db6:	4844      	ldr	r0, [pc, #272]	; (8000ec8 <fsm_traffic_led+0x250>)
 8000db8:	f000 fe8f 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TRAFFIC2_AMBER_GPIO_Port, TRAFFIC2_AMBER_Pin, 1);
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	2120      	movs	r1, #32
 8000dc0:	4841      	ldr	r0, [pc, #260]	; (8000ec8 <fsm_traffic_led+0x250>)
 8000dc2:	f000 fe8a 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TRAFFIC2_GREEN_GPIO_Port, TRAFFIC2_GREEN_Pin, 0);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2110      	movs	r1, #16
 8000dca:	483f      	ldr	r0, [pc, #252]	; (8000ec8 <fsm_traffic_led+0x250>)
 8000dcc:	f000 fe85 	bl	8001ada <HAL_GPIO_WritePin>
			display7SEG2(final_led_count[2] - index_led[1]);
 8000dd0:	4b3e      	ldr	r3, [pc, #248]	; (8000ecc <fsm_traffic_led+0x254>)
 8000dd2:	689a      	ldr	r2, [r3, #8]
 8000dd4:	4b3e      	ldr	r3, [pc, #248]	; (8000ed0 <fsm_traffic_led+0x258>)
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff fb68 	bl	80004b0 <display7SEG2>
			index_led[1]++;
 8000de0:	4b3b      	ldr	r3, [pc, #236]	; (8000ed0 <fsm_traffic_led+0x258>)
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	3301      	adds	r3, #1
 8000de6:	4a3a      	ldr	r2, [pc, #232]	; (8000ed0 <fsm_traffic_led+0x258>)
 8000de8:	6053      	str	r3, [r2, #4]
			if (final_led_count[2] == index_led[1]) {
 8000dea:	4b38      	ldr	r3, [pc, #224]	; (8000ecc <fsm_traffic_led+0x254>)
 8000dec:	689a      	ldr	r2, [r3, #8]
 8000dee:	4b38      	ldr	r3, [pc, #224]	; (8000ed0 <fsm_traffic_led+0x258>)
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d15f      	bne.n	8000eb6 <fsm_traffic_led+0x23e>
				index_led[1] = 0;
 8000df6:	4b36      	ldr	r3, [pc, #216]	; (8000ed0 <fsm_traffic_led+0x258>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	605a      	str	r2, [r3, #4]
				state_led[1] = 1;
 8000dfc:	4b31      	ldr	r3, [pc, #196]	; (8000ec4 <fsm_traffic_led+0x24c>)
 8000dfe:	2201      	movs	r2, #1
 8000e00:	605a      	str	r2, [r3, #4]
				index_led[1] = 0;
				state_led[1] = 2;
			}
		}
	}
}
 8000e02:	e058      	b.n	8000eb6 <fsm_traffic_led+0x23e>
		} else if (state_led[1] == 1) {
 8000e04:	4b2f      	ldr	r3, [pc, #188]	; (8000ec4 <fsm_traffic_led+0x24c>)
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d128      	bne.n	8000e5e <fsm_traffic_led+0x1e6>
			HAL_GPIO_WritePin(TRAFFIC2_RED_GPIO_Port, TRAFFIC2_RED_Pin, 1);
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	2140      	movs	r1, #64	; 0x40
 8000e10:	482d      	ldr	r0, [pc, #180]	; (8000ec8 <fsm_traffic_led+0x250>)
 8000e12:	f000 fe62 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TRAFFIC2_AMBER_GPIO_Port, TRAFFIC2_AMBER_Pin, 0);
 8000e16:	2200      	movs	r2, #0
 8000e18:	2120      	movs	r1, #32
 8000e1a:	482b      	ldr	r0, [pc, #172]	; (8000ec8 <fsm_traffic_led+0x250>)
 8000e1c:	f000 fe5d 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TRAFFIC2_GREEN_GPIO_Port, TRAFFIC2_GREEN_Pin, 1);
 8000e20:	2201      	movs	r2, #1
 8000e22:	2110      	movs	r1, #16
 8000e24:	4828      	ldr	r0, [pc, #160]	; (8000ec8 <fsm_traffic_led+0x250>)
 8000e26:	f000 fe58 	bl	8001ada <HAL_GPIO_WritePin>
			display7SEG2(final_led_count[1] - index_led[1]);
 8000e2a:	4b28      	ldr	r3, [pc, #160]	; (8000ecc <fsm_traffic_led+0x254>)
 8000e2c:	685a      	ldr	r2, [r3, #4]
 8000e2e:	4b28      	ldr	r3, [pc, #160]	; (8000ed0 <fsm_traffic_led+0x258>)
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	1ad3      	subs	r3, r2, r3
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff fb3b 	bl	80004b0 <display7SEG2>
			index_led[1]++;
 8000e3a:	4b25      	ldr	r3, [pc, #148]	; (8000ed0 <fsm_traffic_led+0x258>)
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	4a23      	ldr	r2, [pc, #140]	; (8000ed0 <fsm_traffic_led+0x258>)
 8000e42:	6053      	str	r3, [r2, #4]
			if (final_led_count[1] == index_led[1]) {
 8000e44:	4b21      	ldr	r3, [pc, #132]	; (8000ecc <fsm_traffic_led+0x254>)
 8000e46:	685a      	ldr	r2, [r3, #4]
 8000e48:	4b21      	ldr	r3, [pc, #132]	; (8000ed0 <fsm_traffic_led+0x258>)
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d132      	bne.n	8000eb6 <fsm_traffic_led+0x23e>
				index_led[1] = 0;
 8000e50:	4b1f      	ldr	r3, [pc, #124]	; (8000ed0 <fsm_traffic_led+0x258>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	605a      	str	r2, [r3, #4]
				state_led[1] = 0;
 8000e56:	4b1b      	ldr	r3, [pc, #108]	; (8000ec4 <fsm_traffic_led+0x24c>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	605a      	str	r2, [r3, #4]
}
 8000e5c:	e02b      	b.n	8000eb6 <fsm_traffic_led+0x23e>
		} else if (state_led[1] == 0) {
 8000e5e:	4b19      	ldr	r3, [pc, #100]	; (8000ec4 <fsm_traffic_led+0x24c>)
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d127      	bne.n	8000eb6 <fsm_traffic_led+0x23e>
			HAL_GPIO_WritePin(TRAFFIC2_RED_GPIO_Port, TRAFFIC2_RED_Pin, 0);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2140      	movs	r1, #64	; 0x40
 8000e6a:	4817      	ldr	r0, [pc, #92]	; (8000ec8 <fsm_traffic_led+0x250>)
 8000e6c:	f000 fe35 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TRAFFIC2_AMBER_GPIO_Port, TRAFFIC2_AMBER_Pin, 1);
 8000e70:	2201      	movs	r2, #1
 8000e72:	2120      	movs	r1, #32
 8000e74:	4814      	ldr	r0, [pc, #80]	; (8000ec8 <fsm_traffic_led+0x250>)
 8000e76:	f000 fe30 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TRAFFIC2_GREEN_GPIO_Port, TRAFFIC2_GREEN_Pin, 1);
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	2110      	movs	r1, #16
 8000e7e:	4812      	ldr	r0, [pc, #72]	; (8000ec8 <fsm_traffic_led+0x250>)
 8000e80:	f000 fe2b 	bl	8001ada <HAL_GPIO_WritePin>
			display7SEG2(final_led_count[0] - index_led[1]);
 8000e84:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <fsm_traffic_led+0x254>)
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <fsm_traffic_led+0x258>)
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff fb0e 	bl	80004b0 <display7SEG2>
			index_led[1]++;
 8000e94:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <fsm_traffic_led+0x258>)
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	4a0d      	ldr	r2, [pc, #52]	; (8000ed0 <fsm_traffic_led+0x258>)
 8000e9c:	6053      	str	r3, [r2, #4]
			if (final_led_count[0] == index_led[1]) {
 8000e9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <fsm_traffic_led+0x254>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	4b0b      	ldr	r3, [pc, #44]	; (8000ed0 <fsm_traffic_led+0x258>)
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	d105      	bne.n	8000eb6 <fsm_traffic_led+0x23e>
				index_led[1] = 0;
 8000eaa:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <fsm_traffic_led+0x258>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	605a      	str	r2, [r3, #4]
				state_led[1] = 2;
 8000eb0:	4b04      	ldr	r3, [pc, #16]	; (8000ec4 <fsm_traffic_led+0x24c>)
 8000eb2:	2202      	movs	r2, #2
 8000eb4:	605a      	str	r2, [r3, #4]
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000000 	.word	0x20000000
 8000ec0:	40010c00 	.word	0x40010c00
 8000ec4:	2000001c 	.word	0x2000001c
 8000ec8:	40010800 	.word	0x40010800
 8000ecc:	20000010 	.word	0x20000010
 8000ed0:	2000004c 	.word	0x2000004c

08000ed4 <button_reading>:
static GPIO_PinState buttonBuffer[N0_OF_BUTTONS];
static GPIO_PinState debounceButtonBuffer1[N0_OF_BUTTONS];
static GPIO_PinState debounceButtonBuffer2[N0_OF_BUTTONS];
static uint8_t flagForButtonPress1s[N0_OF_BUTTONS];
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];
void button_reading(void) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
	for (uint16_t i = 0; i < N0_OF_BUTTONS; i++) {
 8000eda:	2300      	movs	r3, #0
 8000edc:	80fb      	strh	r3, [r7, #6]
 8000ede:	e063      	b.n	8000fa8 <button_reading+0xd4>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000ee0:	88fa      	ldrh	r2, [r7, #6]
 8000ee2:	88fb      	ldrh	r3, [r7, #6]
 8000ee4:	4934      	ldr	r1, [pc, #208]	; (8000fb8 <button_reading+0xe4>)
 8000ee6:	5c89      	ldrb	r1, [r1, r2]
 8000ee8:	4a34      	ldr	r2, [pc, #208]	; (8000fbc <button_reading+0xe8>)
 8000eea:	54d1      	strb	r1, [r2, r3]
		if (i == 0)
 8000eec:	88fb      	ldrh	r3, [r7, #6]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d109      	bne.n	8000f06 <button_reading+0x32>
			debounceButtonBuffer1[0] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port,
 8000ef2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ef6:	4832      	ldr	r0, [pc, #200]	; (8000fc0 <button_reading+0xec>)
 8000ef8:	f000 fdd8 	bl	8001aac <HAL_GPIO_ReadPin>
 8000efc:	4603      	mov	r3, r0
 8000efe:	461a      	mov	r2, r3
 8000f00:	4b2d      	ldr	r3, [pc, #180]	; (8000fb8 <button_reading+0xe4>)
 8000f02:	701a      	strb	r2, [r3, #0]
 8000f04:	e018      	b.n	8000f38 <button_reading+0x64>
					BUTTON1_Pin);
		else if (i == 1)
 8000f06:	88fb      	ldrh	r3, [r7, #6]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d109      	bne.n	8000f20 <button_reading+0x4c>
			debounceButtonBuffer1[1] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port,
 8000f0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f10:	482b      	ldr	r0, [pc, #172]	; (8000fc0 <button_reading+0xec>)
 8000f12:	f000 fdcb 	bl	8001aac <HAL_GPIO_ReadPin>
 8000f16:	4603      	mov	r3, r0
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b27      	ldr	r3, [pc, #156]	; (8000fb8 <button_reading+0xe4>)
 8000f1c:	705a      	strb	r2, [r3, #1]
 8000f1e:	e00b      	b.n	8000f38 <button_reading+0x64>
					BUTTON2_Pin);
		else if (i == 2)
 8000f20:	88fb      	ldrh	r3, [r7, #6]
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d108      	bne.n	8000f38 <button_reading+0x64>
			debounceButtonBuffer1[2] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port,
 8000f26:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f2a:	4825      	ldr	r0, [pc, #148]	; (8000fc0 <button_reading+0xec>)
 8000f2c:	f000 fdbe 	bl	8001aac <HAL_GPIO_ReadPin>
 8000f30:	4603      	mov	r3, r0
 8000f32:	461a      	mov	r2, r3
 8000f34:	4b20      	ldr	r3, [pc, #128]	; (8000fb8 <button_reading+0xe4>)
 8000f36:	709a      	strb	r2, [r3, #2]
					BUTTON3_Pin);
		if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i])
 8000f38:	88fb      	ldrh	r3, [r7, #6]
 8000f3a:	4a1f      	ldr	r2, [pc, #124]	; (8000fb8 <button_reading+0xe4>)
 8000f3c:	5cd2      	ldrb	r2, [r2, r3]
 8000f3e:	88fb      	ldrh	r3, [r7, #6]
 8000f40:	491e      	ldr	r1, [pc, #120]	; (8000fbc <button_reading+0xe8>)
 8000f42:	5ccb      	ldrb	r3, [r1, r3]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d105      	bne.n	8000f54 <button_reading+0x80>
			buttonBuffer[i] = debounceButtonBuffer1[i];
 8000f48:	88fa      	ldrh	r2, [r7, #6]
 8000f4a:	88fb      	ldrh	r3, [r7, #6]
 8000f4c:	491a      	ldr	r1, [pc, #104]	; (8000fb8 <button_reading+0xe4>)
 8000f4e:	5c89      	ldrb	r1, [r1, r2]
 8000f50:	4a1c      	ldr	r2, [pc, #112]	; (8000fc4 <button_reading+0xf0>)
 8000f52:	54d1      	strb	r1, [r2, r3]
		if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 8000f54:	88fb      	ldrh	r3, [r7, #6]
 8000f56:	4a1b      	ldr	r2, [pc, #108]	; (8000fc4 <button_reading+0xf0>)
 8000f58:	5cd3      	ldrb	r3, [r2, r3]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d118      	bne.n	8000f90 <button_reading+0xbc>
			if (counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 8000f5e:	88fb      	ldrh	r3, [r7, #6]
 8000f60:	4a19      	ldr	r2, [pc, #100]	; (8000fc8 <button_reading+0xf4>)
 8000f62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f66:	2b31      	cmp	r3, #49	; 0x31
 8000f68:	d80d      	bhi.n	8000f86 <button_reading+0xb2>
				flagForButtonPress1s[i] = 0;
 8000f6a:	88fb      	ldrh	r3, [r7, #6]
 8000f6c:	4a17      	ldr	r2, [pc, #92]	; (8000fcc <button_reading+0xf8>)
 8000f6e:	2100      	movs	r1, #0
 8000f70:	54d1      	strb	r1, [r2, r3]
				counterForButtonPress1s[i]++;
 8000f72:	88fb      	ldrh	r3, [r7, #6]
 8000f74:	4a14      	ldr	r2, [pc, #80]	; (8000fc8 <button_reading+0xf4>)
 8000f76:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000f7a:	3201      	adds	r2, #1
 8000f7c:	b291      	uxth	r1, r2
 8000f7e:	4a12      	ldr	r2, [pc, #72]	; (8000fc8 <button_reading+0xf4>)
 8000f80:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000f84:	e00d      	b.n	8000fa2 <button_reading+0xce>
			} else {
				flagForButtonPress1s[i] = 1;
 8000f86:	88fb      	ldrh	r3, [r7, #6]
 8000f88:	4a10      	ldr	r2, [pc, #64]	; (8000fcc <button_reading+0xf8>)
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	54d1      	strb	r1, [r2, r3]
 8000f8e:	e008      	b.n	8000fa2 <button_reading+0xce>
			}
		} else {
			flagForButtonPress1s[i] = 0;
 8000f90:	88fb      	ldrh	r3, [r7, #6]
 8000f92:	4a0e      	ldr	r2, [pc, #56]	; (8000fcc <button_reading+0xf8>)
 8000f94:	2100      	movs	r1, #0
 8000f96:	54d1      	strb	r1, [r2, r3]
			counterForButtonPress1s[i] = 0;
 8000f98:	88fb      	ldrh	r3, [r7, #6]
 8000f9a:	4a0b      	ldr	r2, [pc, #44]	; (8000fc8 <button_reading+0xf4>)
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint16_t i = 0; i < N0_OF_BUTTONS; i++) {
 8000fa2:	88fb      	ldrh	r3, [r7, #6]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	80fb      	strh	r3, [r7, #6]
 8000fa8:	88fb      	ldrh	r3, [r7, #6]
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d998      	bls.n	8000ee0 <button_reading+0xc>
		}
	}
}
 8000fae:	bf00      	nop
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000064 	.word	0x20000064
 8000fbc:	20000068 	.word	0x20000068
 8000fc0:	40010c00 	.word	0x40010c00
 8000fc4:	20000060 	.word	0x20000060
 8000fc8:	20000070 	.word	0x20000070
 8000fcc:	2000006c 	.word	0x2000006c

08000fd0 <isButtonPressed>:

int isButtonPressed(int index) {
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
	if (index >= N0_OF_BUTTONS)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	dd01      	ble.n	8000fe2 <isButtonPressed+0x12>
		return 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	e008      	b.n	8000ff4 <isButtonPressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_RELEASED);
 8000fe2:	4a07      	ldr	r2, [pc, #28]	; (8001000 <isButtonPressed+0x30>)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	bf0c      	ite	eq
 8000fee:	2301      	moveq	r3, #1
 8000ff0:	2300      	movne	r3, #0
 8000ff2:	b2db      	uxtb	r3, r3
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bc80      	pop	{r7}
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	20000060 	.word	0x20000060

08001004 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001008:	f000 fa64 	bl	80014d4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800100c:	f000 f838 	bl	8001080 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001010:	f000 f8be 	bl	8001190 <MX_GPIO_Init>
	MX_TIM2_Init();
 8001014:	f000 f870 	bl	80010f8 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8001018:	4816      	ldr	r0, [pc, #88]	; (8001074 <main+0x70>)
 800101a:	f001 f9c7 	bl	80023ac <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	setTimer1(250);
 800101e:	20fa      	movs	r0, #250	; 0xfa
 8001020:	f000 f92e 	bl	8001280 <setTimer1>
	setTimer2(101);
 8001024:	2065      	movs	r0, #101	; 0x65
 8001026:	f000 f93f 	bl	80012a8 <setTimer2>
	setTimer3(97);
 800102a:	2061      	movs	r0, #97	; 0x61
 800102c:	f000 f950 	bl	80012d0 <setTimer3>

	while (1) {
		if (timer1_flag) {
 8001030:	4b11      	ldr	r3, [pc, #68]	; (8001078 <main+0x74>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d0fb      	beq.n	8001030 <main+0x2c>
			fsm_mode_button1();
 8001038:	f7ff fc2a 	bl	8000890 <fsm_mode_button1>
			fsm_mode_button2();
 800103c:	f7ff fc92 	bl	8000964 <fsm_mode_button2>
			fsm_mode_button3();
 8001040:	f7ff fd2e 	bl	8000aa0 <fsm_mode_button3>
			if (updateState() == MODE1) {
 8001044:	f7ff fc6c 	bl	8000920 <updateState>
 8001048:	4603      	mov	r3, r0
 800104a:	2b01      	cmp	r3, #1
 800104c:	d105      	bne.n	800105a <main+0x56>
				setTimer1(250);
 800104e:	20fa      	movs	r0, #250	; 0xfa
 8001050:	f000 f916 	bl	8001280 <setTimer1>
				fsm_traffic_led();
 8001054:	f7ff fe10 	bl	8000c78 <fsm_traffic_led>
 8001058:	e7ea      	b.n	8001030 <main+0x2c>
			} else {
				setTimer1(100);
 800105a:	2064      	movs	r0, #100	; 0x64
 800105c:	f000 f910 	bl	8001280 <setTimer1>
				led_blink();
 8001060:	f7ff fd5c 	bl	8000b1c <led_blink>
				display7SEG2(status_mode);
 8001064:	4b05      	ldr	r3, [pc, #20]	; (800107c <main+0x78>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fa21 	bl	80004b0 <display7SEG2>
				display_set_value();
 800106e:	f7ff fdbf 	bl	8000bf0 <display_set_value>
		if (timer1_flag) {
 8001072:	e7dd      	b.n	8001030 <main+0x2c>
 8001074:	20000078 	.word	0x20000078
 8001078:	200000c4 	.word	0x200000c4
 800107c:	20000000 	.word	0x20000000

08001080 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001080:	b580      	push	{r7, lr}
 8001082:	b090      	sub	sp, #64	; 0x40
 8001084:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001086:	f107 0318 	add.w	r3, r7, #24
 800108a:	2228      	movs	r2, #40	; 0x28
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f001 fd44 	bl	8002b1c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]
 80010a0:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010a2:	2302      	movs	r3, #2
 80010a4:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010a6:	2301      	movs	r3, #1
 80010a8:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010aa:	2310      	movs	r3, #16
 80010ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010ae:	2300      	movs	r3, #0
 80010b0:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80010b2:	f107 0318 	add.w	r3, r7, #24
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 fd40 	bl	8001b3c <HAL_RCC_OscConfig>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <SystemClock_Config+0x46>
		Error_Handler();
 80010c2:	f000 f8d7 	bl	8001274 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80010c6:	230f      	movs	r3, #15
 80010c8:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010ca:	2300      	movs	r3, #0
 80010cc:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	2100      	movs	r1, #0
 80010de:	4618      	mov	r0, r3
 80010e0:	f000 ffae 	bl	8002040 <HAL_RCC_ClockConfig>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <SystemClock_Config+0x6e>
		Error_Handler();
 80010ea:	f000 f8c3 	bl	8001274 <Error_Handler>
	}
}
 80010ee:	bf00      	nop
 80010f0:	3740      	adds	r7, #64	; 0x40
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80010fe:	f107 0308 	add.w	r3, r7, #8
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800110c:	463b      	mov	r3, r7
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001114:	4b1d      	ldr	r3, [pc, #116]	; (800118c <MX_TIM2_Init+0x94>)
 8001116:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800111a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 7999;
 800111c:	4b1b      	ldr	r3, [pc, #108]	; (800118c <MX_TIM2_Init+0x94>)
 800111e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001122:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001124:	4b19      	ldr	r3, [pc, #100]	; (800118c <MX_TIM2_Init+0x94>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 9;
 800112a:	4b18      	ldr	r3, [pc, #96]	; (800118c <MX_TIM2_Init+0x94>)
 800112c:	2209      	movs	r2, #9
 800112e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001130:	4b16      	ldr	r3, [pc, #88]	; (800118c <MX_TIM2_Init+0x94>)
 8001132:	2200      	movs	r2, #0
 8001134:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001136:	4b15      	ldr	r3, [pc, #84]	; (800118c <MX_TIM2_Init+0x94>)
 8001138:	2200      	movs	r2, #0
 800113a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800113c:	4813      	ldr	r0, [pc, #76]	; (800118c <MX_TIM2_Init+0x94>)
 800113e:	f001 f8e5 	bl	800230c <HAL_TIM_Base_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_TIM2_Init+0x54>
		Error_Handler();
 8001148:	f000 f894 	bl	8001274 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800114c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001150:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001152:	f107 0308 	add.w	r3, r7, #8
 8001156:	4619      	mov	r1, r3
 8001158:	480c      	ldr	r0, [pc, #48]	; (800118c <MX_TIM2_Init+0x94>)
 800115a:	f001 fa7b 	bl	8002654 <HAL_TIM_ConfigClockSource>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_TIM2_Init+0x70>
		Error_Handler();
 8001164:	f000 f886 	bl	8001274 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001168:	2300      	movs	r3, #0
 800116a:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800116c:	2300      	movs	r3, #0
 800116e:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001170:	463b      	mov	r3, r7
 8001172:	4619      	mov	r1, r3
 8001174:	4805      	ldr	r0, [pc, #20]	; (800118c <MX_TIM2_Init+0x94>)
 8001176:	f001 fc43 	bl	8002a00 <HAL_TIMEx_MasterConfigSynchronization>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8001180:	f000 f878 	bl	8001274 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001184:	bf00      	nop
 8001186:	3718      	adds	r7, #24
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000078 	.word	0x20000078

08001190 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001196:	f107 0308 	add.w	r3, r7, #8
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80011a4:	4b2a      	ldr	r3, [pc, #168]	; (8001250 <MX_GPIO_Init+0xc0>)
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	4a29      	ldr	r2, [pc, #164]	; (8001250 <MX_GPIO_Init+0xc0>)
 80011aa:	f043 0304 	orr.w	r3, r3, #4
 80011ae:	6193      	str	r3, [r2, #24]
 80011b0:	4b27      	ldr	r3, [pc, #156]	; (8001250 <MX_GPIO_Init+0xc0>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	f003 0304 	and.w	r3, r3, #4
 80011b8:	607b      	str	r3, [r7, #4]
 80011ba:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80011bc:	4b24      	ldr	r3, [pc, #144]	; (8001250 <MX_GPIO_Init+0xc0>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	4a23      	ldr	r2, [pc, #140]	; (8001250 <MX_GPIO_Init+0xc0>)
 80011c2:	f043 0308 	orr.w	r3, r3, #8
 80011c6:	6193      	str	r3, [r2, #24]
 80011c8:	4b21      	ldr	r3, [pc, #132]	; (8001250 <MX_GPIO_Init+0xc0>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	f003 0308 	and.w	r3, r3, #8
 80011d0:	603b      	str	r3, [r7, #0]
 80011d2:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 80011d4:	2200      	movs	r2, #0
 80011d6:	f64a 71fe 	movw	r1, #45054	; 0xaffe
 80011da:	481e      	ldr	r0, [pc, #120]	; (8001254 <MX_GPIO_Init+0xc4>)
 80011dc:	f000 fc7d 	bl	8001ada <HAL_GPIO_WritePin>
					| TRAFFIC2_GREEN_Pin | TRAFFIC2_AMBER_Pin | TRAFFIC2_RED_Pin
					| SEG2_0_Pin | SEG2_1_Pin | SEG2_2_Pin | SEG2_3_Pin
					| SEG2_4_Pin | LED_RED_Pin | SEG2_5_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 80011e0:	2200      	movs	r2, #0
 80011e2:	f643 61ff 	movw	r1, #16127	; 0x3eff
 80011e6:	481c      	ldr	r0, [pc, #112]	; (8001258 <MX_GPIO_Init+0xc8>)
 80011e8:	f000 fc77 	bl	8001ada <HAL_GPIO_WritePin>

	/*Configure GPIO pins : TRAFFIC_GREEN_Pin TRAFFIC_AMBER_Pin TRAFFIC_RED_Pin TRAFFIC2_GREEN_Pin
	 TRAFFIC2_AMBER_Pin TRAFFIC2_RED_Pin SEG2_0_Pin SEG2_1_Pin
	 SEG2_2_Pin SEG2_3_Pin SEG2_4_Pin LED_RED_Pin
	 SEG2_5_Pin */
	GPIO_InitStruct.Pin = TRAFFIC_GREEN_Pin | TRAFFIC_AMBER_Pin
 80011ec:	f64a 73fe 	movw	r3, #45054	; 0xaffe
 80011f0:	60bb      	str	r3, [r7, #8]
			| TRAFFIC_RED_Pin | TRAFFIC2_GREEN_Pin | TRAFFIC2_AMBER_Pin
			| TRAFFIC2_RED_Pin | SEG2_0_Pin | SEG2_1_Pin | SEG2_2_Pin
			| SEG2_3_Pin | SEG2_4_Pin | LED_RED_Pin | SEG2_5_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f2:	2301      	movs	r3, #1
 80011f4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fa:	2302      	movs	r3, #2
 80011fc:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fe:	f107 0308 	add.w	r3, r7, #8
 8001202:	4619      	mov	r1, r3
 8001204:	4813      	ldr	r0, [pc, #76]	; (8001254 <MX_GPIO_Init+0xc4>)
 8001206:	f000 fad5 	bl	80017b4 <HAL_GPIO_Init>

	/*Configure GPIO pins : SEG2_6_Pin SEG1_0_Pin SEG1_1_Pin BUTTON2_Pin
	 SEG1_2_Pin SEG1_3_Pin SEG1_4_Pin SEG1_5_Pin
	 SEG1_6_Pin BUTTON1_Pin */
	GPIO_InitStruct.Pin = SEG2_6_Pin | SEG1_0_Pin | SEG1_1_Pin | BUTTON2_Pin
 800120a:	f240 63ff 	movw	r3, #1791	; 0x6ff
 800120e:	60bb      	str	r3, [r7, #8]
			| SEG1_2_Pin | SEG1_3_Pin | SEG1_4_Pin | SEG1_5_Pin | SEG1_6_Pin
			| BUTTON1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001210:	2301      	movs	r3, #1
 8001212:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001218:	2302      	movs	r3, #2
 800121a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121c:	f107 0308 	add.w	r3, r7, #8
 8001220:	4619      	mov	r1, r3
 8001222:	480d      	ldr	r0, [pc, #52]	; (8001258 <MX_GPIO_Init+0xc8>)
 8001224:	f000 fac6 	bl	80017b4 <HAL_GPIO_Init>

	/*Configure GPIO pins : BUTTON3_Pin EN1_Pin EN2_Pin */
	GPIO_InitStruct.Pin = BUTTON3_Pin | EN1_Pin | EN2_Pin;
 8001228:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800122c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122e:	2301      	movs	r3, #1
 8001230:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001232:	2302      	movs	r3, #2
 8001234:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001236:	2302      	movs	r3, #2
 8001238:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123a:	f107 0308 	add.w	r3, r7, #8
 800123e:	4619      	mov	r1, r3
 8001240:	4805      	ldr	r0, [pc, #20]	; (8001258 <MX_GPIO_Init+0xc8>)
 8001242:	f000 fab7 	bl	80017b4 <HAL_GPIO_Init>

}
 8001246:	bf00      	nop
 8001248:	3718      	adds	r7, #24
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40021000 	.word	0x40021000
 8001254:	40010800 	.word	0x40010800
 8001258:	40010c00 	.word	0x40010c00

0800125c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	timerRun();
 8001264:	f000 f848 	bl	80012f8 <timerRun>
	button_reading();
 8001268:	f7ff fe34 	bl	8000ed4 <button_reading>
}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001278:	b672      	cpsid	i
}
 800127a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800127c:	e7fe      	b.n	800127c <Error_Handler+0x8>
	...

08001280 <setTimer1>:
int timer3_counter = 0;
int timer3_flag = 0;
int timer4_counter = 0;
int timer4_flag = 0;

void setTimer1(int duration) {
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 8001288:	4a05      	ldr	r2, [pc, #20]	; (80012a0 <setTimer1+0x20>)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800128e:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <setTimer1+0x24>)
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	bc80      	pop	{r7}
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	200000c0 	.word	0x200000c0
 80012a4:	200000c4 	.word	0x200000c4

080012a8 <setTimer2>:
void setTimer2(int duration) {
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 80012b0:	4a05      	ldr	r2, [pc, #20]	; (80012c8 <setTimer2+0x20>)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80012b6:	4b05      	ldr	r3, [pc, #20]	; (80012cc <setTimer2+0x24>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	200000c8 	.word	0x200000c8
 80012cc:	200000cc 	.word	0x200000cc

080012d0 <setTimer3>:
void setTimer3(int duration) {
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 80012d8:	4a05      	ldr	r2, [pc, #20]	; (80012f0 <setTimer3+0x20>)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 80012de:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <setTimer3+0x24>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bc80      	pop	{r7}
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	200000d0 	.word	0x200000d0
 80012f4:	200000d4 	.word	0x200000d4

080012f8 <timerRun>:
void setTimer4(int duration) {
	timer4_counter = duration;
	timer4_flag = 0;
}
void timerRun() {
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
	if (timer1_counter > 0) {
 80012fc:	4b1b      	ldr	r3, [pc, #108]	; (800136c <timerRun+0x74>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	dd05      	ble.n	8001310 <timerRun+0x18>
		timer1_counter--;
 8001304:	4b19      	ldr	r3, [pc, #100]	; (800136c <timerRun+0x74>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	3b01      	subs	r3, #1
 800130a:	4a18      	ldr	r2, [pc, #96]	; (800136c <timerRun+0x74>)
 800130c:	6013      	str	r3, [r2, #0]
 800130e:	e002      	b.n	8001316 <timerRun+0x1e>
	} else {
		timer1_flag = 1;
 8001310:	4b17      	ldr	r3, [pc, #92]	; (8001370 <timerRun+0x78>)
 8001312:	2201      	movs	r2, #1
 8001314:	601a      	str	r2, [r3, #0]
	}
	if (timer2_counter > 0) {
 8001316:	4b17      	ldr	r3, [pc, #92]	; (8001374 <timerRun+0x7c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	dd05      	ble.n	800132a <timerRun+0x32>
		timer2_counter--;
 800131e:	4b15      	ldr	r3, [pc, #84]	; (8001374 <timerRun+0x7c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	3b01      	subs	r3, #1
 8001324:	4a13      	ldr	r2, [pc, #76]	; (8001374 <timerRun+0x7c>)
 8001326:	6013      	str	r3, [r2, #0]
 8001328:	e002      	b.n	8001330 <timerRun+0x38>
	} else {
		timer2_flag = 1;
 800132a:	4b13      	ldr	r3, [pc, #76]	; (8001378 <timerRun+0x80>)
 800132c:	2201      	movs	r2, #1
 800132e:	601a      	str	r2, [r3, #0]
	}
	if (timer3_counter > 0) {
 8001330:	4b12      	ldr	r3, [pc, #72]	; (800137c <timerRun+0x84>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	dd05      	ble.n	8001344 <timerRun+0x4c>
		timer3_counter--;
 8001338:	4b10      	ldr	r3, [pc, #64]	; (800137c <timerRun+0x84>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	3b01      	subs	r3, #1
 800133e:	4a0f      	ldr	r2, [pc, #60]	; (800137c <timerRun+0x84>)
 8001340:	6013      	str	r3, [r2, #0]
 8001342:	e002      	b.n	800134a <timerRun+0x52>
	} else {
		timer3_flag = 1;
 8001344:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <timerRun+0x88>)
 8001346:	2201      	movs	r2, #1
 8001348:	601a      	str	r2, [r3, #0]
	}
	if (timer4_counter > 0) {
 800134a:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <timerRun+0x8c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	dd05      	ble.n	800135e <timerRun+0x66>
		timer4_counter--;
 8001352:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <timerRun+0x8c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	3b01      	subs	r3, #1
 8001358:	4a0a      	ldr	r2, [pc, #40]	; (8001384 <timerRun+0x8c>)
 800135a:	6013      	str	r3, [r2, #0]
	} else {
		timer4_flag = 1;
	}
}
 800135c:	e002      	b.n	8001364 <timerRun+0x6c>
		timer4_flag = 1;
 800135e:	4b0a      	ldr	r3, [pc, #40]	; (8001388 <timerRun+0x90>)
 8001360:	2201      	movs	r2, #1
 8001362:	601a      	str	r2, [r3, #0]
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr
 800136c:	200000c0 	.word	0x200000c0
 8001370:	200000c4 	.word	0x200000c4
 8001374:	200000c8 	.word	0x200000c8
 8001378:	200000cc 	.word	0x200000cc
 800137c:	200000d0 	.word	0x200000d0
 8001380:	200000d4 	.word	0x200000d4
 8001384:	200000d8 	.word	0x200000d8
 8001388:	200000dc 	.word	0x200000dc

0800138c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001392:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <HAL_MspInit+0x40>)
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	4a0d      	ldr	r2, [pc, #52]	; (80013cc <HAL_MspInit+0x40>)
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	6193      	str	r3, [r2, #24]
 800139e:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <HAL_MspInit+0x40>)
 80013a0:	699b      	ldr	r3, [r3, #24]
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	607b      	str	r3, [r7, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013aa:	4b08      	ldr	r3, [pc, #32]	; (80013cc <HAL_MspInit+0x40>)
 80013ac:	69db      	ldr	r3, [r3, #28]
 80013ae:	4a07      	ldr	r2, [pc, #28]	; (80013cc <HAL_MspInit+0x40>)
 80013b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013b4:	61d3      	str	r3, [r2, #28]
 80013b6:	4b05      	ldr	r3, [pc, #20]	; (80013cc <HAL_MspInit+0x40>)
 80013b8:	69db      	ldr	r3, [r3, #28]
 80013ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013be:	603b      	str	r3, [r7, #0]
 80013c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr
 80013cc:	40021000 	.word	0x40021000

080013d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013e0:	d113      	bne.n	800140a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013e2:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <HAL_TIM_Base_MspInit+0x44>)
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	4a0b      	ldr	r2, [pc, #44]	; (8001414 <HAL_TIM_Base_MspInit+0x44>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	61d3      	str	r3, [r2, #28]
 80013ee:	4b09      	ldr	r3, [pc, #36]	; (8001414 <HAL_TIM_Base_MspInit+0x44>)
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2100      	movs	r1, #0
 80013fe:	201c      	movs	r0, #28
 8001400:	f000 f9a1 	bl	8001746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001404:	201c      	movs	r0, #28
 8001406:	f000 f9ba 	bl	800177e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800140a:	bf00      	nop
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40021000 	.word	0x40021000

08001418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800141c:	e7fe      	b.n	800141c <NMI_Handler+0x4>

0800141e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001422:	e7fe      	b.n	8001422 <HardFault_Handler+0x4>

08001424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001428:	e7fe      	b.n	8001428 <MemManage_Handler+0x4>

0800142a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800142e:	e7fe      	b.n	800142e <BusFault_Handler+0x4>

08001430 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001434:	e7fe      	b.n	8001434 <UsageFault_Handler+0x4>

08001436 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	46bd      	mov	sp, r7
 800143e:	bc80      	pop	{r7}
 8001440:	4770      	bx	lr

08001442 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr

0800144e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr

0800145a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800145e:	f000 f87f 	bl	8001560 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
	...

08001468 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800146c:	4802      	ldr	r0, [pc, #8]	; (8001478 <TIM2_IRQHandler+0x10>)
 800146e:	f000 ffe9 	bl	8002444 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000078 	.word	0x20000078

0800147c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr

08001488 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001488:	480c      	ldr	r0, [pc, #48]	; (80014bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800148a:	490d      	ldr	r1, [pc, #52]	; (80014c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800148c:	4a0d      	ldr	r2, [pc, #52]	; (80014c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800148e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001490:	e002      	b.n	8001498 <LoopCopyDataInit>

08001492 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001492:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001494:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001496:	3304      	adds	r3, #4

08001498 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001498:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800149a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800149c:	d3f9      	bcc.n	8001492 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800149e:	4a0a      	ldr	r2, [pc, #40]	; (80014c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014a0:	4c0a      	ldr	r4, [pc, #40]	; (80014cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80014a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014a4:	e001      	b.n	80014aa <LoopFillZerobss>

080014a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a8:	3204      	adds	r2, #4

080014aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014ac:	d3fb      	bcc.n	80014a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014ae:	f7ff ffe5 	bl	800147c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014b2:	f001 fb0f 	bl	8002ad4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014b6:	f7ff fda5 	bl	8001004 <main>
  bx lr
 80014ba:	4770      	bx	lr
  ldr r0, =_sdata
 80014bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014c0:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 80014c4:	08002b6c 	.word	0x08002b6c
  ldr r2, =_sbss
 80014c8:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 80014cc:	200000e4 	.word	0x200000e4

080014d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014d0:	e7fe      	b.n	80014d0 <ADC1_2_IRQHandler>
	...

080014d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014d8:	4b08      	ldr	r3, [pc, #32]	; (80014fc <HAL_Init+0x28>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a07      	ldr	r2, [pc, #28]	; (80014fc <HAL_Init+0x28>)
 80014de:	f043 0310 	orr.w	r3, r3, #16
 80014e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e4:	2003      	movs	r0, #3
 80014e6:	f000 f923 	bl	8001730 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ea:	200f      	movs	r0, #15
 80014ec:	f000 f808 	bl	8001500 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014f0:	f7ff ff4c 	bl	800138c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40022000 	.word	0x40022000

08001500 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001508:	4b12      	ldr	r3, [pc, #72]	; (8001554 <HAL_InitTick+0x54>)
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	4b12      	ldr	r3, [pc, #72]	; (8001558 <HAL_InitTick+0x58>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	4619      	mov	r1, r3
 8001512:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001516:	fbb3 f3f1 	udiv	r3, r3, r1
 800151a:	fbb2 f3f3 	udiv	r3, r2, r3
 800151e:	4618      	mov	r0, r3
 8001520:	f000 f93b 	bl	800179a <HAL_SYSTICK_Config>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e00e      	b.n	800154c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2b0f      	cmp	r3, #15
 8001532:	d80a      	bhi.n	800154a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001534:	2200      	movs	r2, #0
 8001536:	6879      	ldr	r1, [r7, #4]
 8001538:	f04f 30ff 	mov.w	r0, #4294967295
 800153c:	f000 f903 	bl	8001746 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001540:	4a06      	ldr	r2, [pc, #24]	; (800155c <HAL_InitTick+0x5c>)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001546:	2300      	movs	r3, #0
 8001548:	e000      	b.n	800154c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
}
 800154c:	4618      	mov	r0, r3
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000024 	.word	0x20000024
 8001558:	2000002c 	.word	0x2000002c
 800155c:	20000028 	.word	0x20000028

08001560 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001564:	4b05      	ldr	r3, [pc, #20]	; (800157c <HAL_IncTick+0x1c>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	461a      	mov	r2, r3
 800156a:	4b05      	ldr	r3, [pc, #20]	; (8001580 <HAL_IncTick+0x20>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4413      	add	r3, r2
 8001570:	4a03      	ldr	r2, [pc, #12]	; (8001580 <HAL_IncTick+0x20>)
 8001572:	6013      	str	r3, [r2, #0]
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr
 800157c:	2000002c 	.word	0x2000002c
 8001580:	200000e0 	.word	0x200000e0

08001584 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return uwTick;
 8001588:	4b02      	ldr	r3, [pc, #8]	; (8001594 <HAL_GetTick+0x10>)
 800158a:	681b      	ldr	r3, [r3, #0]
}
 800158c:	4618      	mov	r0, r3
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr
 8001594:	200000e0 	.word	0x200000e0

08001598 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f003 0307 	and.w	r3, r3, #7
 80015a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015a8:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <__NVIC_SetPriorityGrouping+0x44>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ae:	68ba      	ldr	r2, [r7, #8]
 80015b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015b4:	4013      	ands	r3, r2
 80015b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ca:	4a04      	ldr	r2, [pc, #16]	; (80015dc <__NVIC_SetPriorityGrouping+0x44>)
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	60d3      	str	r3, [r2, #12]
}
 80015d0:	bf00      	nop
 80015d2:	3714      	adds	r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015e4:	4b04      	ldr	r3, [pc, #16]	; (80015f8 <__NVIC_GetPriorityGrouping+0x18>)
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	0a1b      	lsrs	r3, r3, #8
 80015ea:	f003 0307 	and.w	r3, r3, #7
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bc80      	pop	{r7}
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160a:	2b00      	cmp	r3, #0
 800160c:	db0b      	blt.n	8001626 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800160e:	79fb      	ldrb	r3, [r7, #7]
 8001610:	f003 021f 	and.w	r2, r3, #31
 8001614:	4906      	ldr	r1, [pc, #24]	; (8001630 <__NVIC_EnableIRQ+0x34>)
 8001616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161a:	095b      	lsrs	r3, r3, #5
 800161c:	2001      	movs	r0, #1
 800161e:	fa00 f202 	lsl.w	r2, r0, r2
 8001622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr
 8001630:	e000e100 	.word	0xe000e100

08001634 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	6039      	str	r1, [r7, #0]
 800163e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001644:	2b00      	cmp	r3, #0
 8001646:	db0a      	blt.n	800165e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	b2da      	uxtb	r2, r3
 800164c:	490c      	ldr	r1, [pc, #48]	; (8001680 <__NVIC_SetPriority+0x4c>)
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	0112      	lsls	r2, r2, #4
 8001654:	b2d2      	uxtb	r2, r2
 8001656:	440b      	add	r3, r1
 8001658:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800165c:	e00a      	b.n	8001674 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	b2da      	uxtb	r2, r3
 8001662:	4908      	ldr	r1, [pc, #32]	; (8001684 <__NVIC_SetPriority+0x50>)
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	f003 030f 	and.w	r3, r3, #15
 800166a:	3b04      	subs	r3, #4
 800166c:	0112      	lsls	r2, r2, #4
 800166e:	b2d2      	uxtb	r2, r2
 8001670:	440b      	add	r3, r1
 8001672:	761a      	strb	r2, [r3, #24]
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	e000e100 	.word	0xe000e100
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001688:	b480      	push	{r7}
 800168a:	b089      	sub	sp, #36	; 0x24
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	f1c3 0307 	rsb	r3, r3, #7
 80016a2:	2b04      	cmp	r3, #4
 80016a4:	bf28      	it	cs
 80016a6:	2304      	movcs	r3, #4
 80016a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	3304      	adds	r3, #4
 80016ae:	2b06      	cmp	r3, #6
 80016b0:	d902      	bls.n	80016b8 <NVIC_EncodePriority+0x30>
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	3b03      	subs	r3, #3
 80016b6:	e000      	b.n	80016ba <NVIC_EncodePriority+0x32>
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016bc:	f04f 32ff 	mov.w	r2, #4294967295
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43da      	mvns	r2, r3
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	401a      	ands	r2, r3
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016d0:	f04f 31ff 	mov.w	r1, #4294967295
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	fa01 f303 	lsl.w	r3, r1, r3
 80016da:	43d9      	mvns	r1, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e0:	4313      	orrs	r3, r2
         );
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3724      	adds	r7, #36	; 0x24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr

080016ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3b01      	subs	r3, #1
 80016f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016fc:	d301      	bcc.n	8001702 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016fe:	2301      	movs	r3, #1
 8001700:	e00f      	b.n	8001722 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001702:	4a0a      	ldr	r2, [pc, #40]	; (800172c <SysTick_Config+0x40>)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3b01      	subs	r3, #1
 8001708:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800170a:	210f      	movs	r1, #15
 800170c:	f04f 30ff 	mov.w	r0, #4294967295
 8001710:	f7ff ff90 	bl	8001634 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001714:	4b05      	ldr	r3, [pc, #20]	; (800172c <SysTick_Config+0x40>)
 8001716:	2200      	movs	r2, #0
 8001718:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800171a:	4b04      	ldr	r3, [pc, #16]	; (800172c <SysTick_Config+0x40>)
 800171c:	2207      	movs	r2, #7
 800171e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	e000e010 	.word	0xe000e010

08001730 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff ff2d 	bl	8001598 <__NVIC_SetPriorityGrouping>
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001746:	b580      	push	{r7, lr}
 8001748:	b086      	sub	sp, #24
 800174a:	af00      	add	r7, sp, #0
 800174c:	4603      	mov	r3, r0
 800174e:	60b9      	str	r1, [r7, #8]
 8001750:	607a      	str	r2, [r7, #4]
 8001752:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001758:	f7ff ff42 	bl	80015e0 <__NVIC_GetPriorityGrouping>
 800175c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	68b9      	ldr	r1, [r7, #8]
 8001762:	6978      	ldr	r0, [r7, #20]
 8001764:	f7ff ff90 	bl	8001688 <NVIC_EncodePriority>
 8001768:	4602      	mov	r2, r0
 800176a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800176e:	4611      	mov	r1, r2
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff ff5f 	bl	8001634 <__NVIC_SetPriority>
}
 8001776:	bf00      	nop
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	4603      	mov	r3, r0
 8001786:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ff35 	bl	80015fc <__NVIC_EnableIRQ>
}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b082      	sub	sp, #8
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7ff ffa2 	bl	80016ec <SysTick_Config>
 80017a8:	4603      	mov	r3, r0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
	...

080017b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b08b      	sub	sp, #44	; 0x2c
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017be:	2300      	movs	r3, #0
 80017c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017c2:	2300      	movs	r3, #0
 80017c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017c6:	e161      	b.n	8001a8c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017c8:	2201      	movs	r2, #1
 80017ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	69fa      	ldr	r2, [r7, #28]
 80017d8:	4013      	ands	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	f040 8150 	bne.w	8001a86 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	4a97      	ldr	r2, [pc, #604]	; (8001a48 <HAL_GPIO_Init+0x294>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d05e      	beq.n	80018ae <HAL_GPIO_Init+0xfa>
 80017f0:	4a95      	ldr	r2, [pc, #596]	; (8001a48 <HAL_GPIO_Init+0x294>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d875      	bhi.n	80018e2 <HAL_GPIO_Init+0x12e>
 80017f6:	4a95      	ldr	r2, [pc, #596]	; (8001a4c <HAL_GPIO_Init+0x298>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d058      	beq.n	80018ae <HAL_GPIO_Init+0xfa>
 80017fc:	4a93      	ldr	r2, [pc, #588]	; (8001a4c <HAL_GPIO_Init+0x298>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d86f      	bhi.n	80018e2 <HAL_GPIO_Init+0x12e>
 8001802:	4a93      	ldr	r2, [pc, #588]	; (8001a50 <HAL_GPIO_Init+0x29c>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d052      	beq.n	80018ae <HAL_GPIO_Init+0xfa>
 8001808:	4a91      	ldr	r2, [pc, #580]	; (8001a50 <HAL_GPIO_Init+0x29c>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d869      	bhi.n	80018e2 <HAL_GPIO_Init+0x12e>
 800180e:	4a91      	ldr	r2, [pc, #580]	; (8001a54 <HAL_GPIO_Init+0x2a0>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d04c      	beq.n	80018ae <HAL_GPIO_Init+0xfa>
 8001814:	4a8f      	ldr	r2, [pc, #572]	; (8001a54 <HAL_GPIO_Init+0x2a0>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d863      	bhi.n	80018e2 <HAL_GPIO_Init+0x12e>
 800181a:	4a8f      	ldr	r2, [pc, #572]	; (8001a58 <HAL_GPIO_Init+0x2a4>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d046      	beq.n	80018ae <HAL_GPIO_Init+0xfa>
 8001820:	4a8d      	ldr	r2, [pc, #564]	; (8001a58 <HAL_GPIO_Init+0x2a4>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d85d      	bhi.n	80018e2 <HAL_GPIO_Init+0x12e>
 8001826:	2b12      	cmp	r3, #18
 8001828:	d82a      	bhi.n	8001880 <HAL_GPIO_Init+0xcc>
 800182a:	2b12      	cmp	r3, #18
 800182c:	d859      	bhi.n	80018e2 <HAL_GPIO_Init+0x12e>
 800182e:	a201      	add	r2, pc, #4	; (adr r2, 8001834 <HAL_GPIO_Init+0x80>)
 8001830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001834:	080018af 	.word	0x080018af
 8001838:	08001889 	.word	0x08001889
 800183c:	0800189b 	.word	0x0800189b
 8001840:	080018dd 	.word	0x080018dd
 8001844:	080018e3 	.word	0x080018e3
 8001848:	080018e3 	.word	0x080018e3
 800184c:	080018e3 	.word	0x080018e3
 8001850:	080018e3 	.word	0x080018e3
 8001854:	080018e3 	.word	0x080018e3
 8001858:	080018e3 	.word	0x080018e3
 800185c:	080018e3 	.word	0x080018e3
 8001860:	080018e3 	.word	0x080018e3
 8001864:	080018e3 	.word	0x080018e3
 8001868:	080018e3 	.word	0x080018e3
 800186c:	080018e3 	.word	0x080018e3
 8001870:	080018e3 	.word	0x080018e3
 8001874:	080018e3 	.word	0x080018e3
 8001878:	08001891 	.word	0x08001891
 800187c:	080018a5 	.word	0x080018a5
 8001880:	4a76      	ldr	r2, [pc, #472]	; (8001a5c <HAL_GPIO_Init+0x2a8>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d013      	beq.n	80018ae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001886:	e02c      	b.n	80018e2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	623b      	str	r3, [r7, #32]
          break;
 800188e:	e029      	b.n	80018e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	3304      	adds	r3, #4
 8001896:	623b      	str	r3, [r7, #32]
          break;
 8001898:	e024      	b.n	80018e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	3308      	adds	r3, #8
 80018a0:	623b      	str	r3, [r7, #32]
          break;
 80018a2:	e01f      	b.n	80018e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	330c      	adds	r3, #12
 80018aa:	623b      	str	r3, [r7, #32]
          break;
 80018ac:	e01a      	b.n	80018e4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d102      	bne.n	80018bc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018b6:	2304      	movs	r3, #4
 80018b8:	623b      	str	r3, [r7, #32]
          break;
 80018ba:	e013      	b.n	80018e4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d105      	bne.n	80018d0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018c4:	2308      	movs	r3, #8
 80018c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	69fa      	ldr	r2, [r7, #28]
 80018cc:	611a      	str	r2, [r3, #16]
          break;
 80018ce:	e009      	b.n	80018e4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018d0:	2308      	movs	r3, #8
 80018d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	69fa      	ldr	r2, [r7, #28]
 80018d8:	615a      	str	r2, [r3, #20]
          break;
 80018da:	e003      	b.n	80018e4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018dc:	2300      	movs	r3, #0
 80018de:	623b      	str	r3, [r7, #32]
          break;
 80018e0:	e000      	b.n	80018e4 <HAL_GPIO_Init+0x130>
          break;
 80018e2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	2bff      	cmp	r3, #255	; 0xff
 80018e8:	d801      	bhi.n	80018ee <HAL_GPIO_Init+0x13a>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	e001      	b.n	80018f2 <HAL_GPIO_Init+0x13e>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	3304      	adds	r3, #4
 80018f2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	2bff      	cmp	r3, #255	; 0xff
 80018f8:	d802      	bhi.n	8001900 <HAL_GPIO_Init+0x14c>
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	e002      	b.n	8001906 <HAL_GPIO_Init+0x152>
 8001900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001902:	3b08      	subs	r3, #8
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	210f      	movs	r1, #15
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	fa01 f303 	lsl.w	r3, r1, r3
 8001914:	43db      	mvns	r3, r3
 8001916:	401a      	ands	r2, r3
 8001918:	6a39      	ldr	r1, [r7, #32]
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	fa01 f303 	lsl.w	r3, r1, r3
 8001920:	431a      	orrs	r2, r3
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192e:	2b00      	cmp	r3, #0
 8001930:	f000 80a9 	beq.w	8001a86 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001934:	4b4a      	ldr	r3, [pc, #296]	; (8001a60 <HAL_GPIO_Init+0x2ac>)
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	4a49      	ldr	r2, [pc, #292]	; (8001a60 <HAL_GPIO_Init+0x2ac>)
 800193a:	f043 0301 	orr.w	r3, r3, #1
 800193e:	6193      	str	r3, [r2, #24]
 8001940:	4b47      	ldr	r3, [pc, #284]	; (8001a60 <HAL_GPIO_Init+0x2ac>)
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	60bb      	str	r3, [r7, #8]
 800194a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800194c:	4a45      	ldr	r2, [pc, #276]	; (8001a64 <HAL_GPIO_Init+0x2b0>)
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	089b      	lsrs	r3, r3, #2
 8001952:	3302      	adds	r3, #2
 8001954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001958:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195c:	f003 0303 	and.w	r3, r3, #3
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	220f      	movs	r2, #15
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	43db      	mvns	r3, r3
 800196a:	68fa      	ldr	r2, [r7, #12]
 800196c:	4013      	ands	r3, r2
 800196e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4a3d      	ldr	r2, [pc, #244]	; (8001a68 <HAL_GPIO_Init+0x2b4>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d00d      	beq.n	8001994 <HAL_GPIO_Init+0x1e0>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4a3c      	ldr	r2, [pc, #240]	; (8001a6c <HAL_GPIO_Init+0x2b8>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d007      	beq.n	8001990 <HAL_GPIO_Init+0x1dc>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a3b      	ldr	r2, [pc, #236]	; (8001a70 <HAL_GPIO_Init+0x2bc>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d101      	bne.n	800198c <HAL_GPIO_Init+0x1d8>
 8001988:	2302      	movs	r3, #2
 800198a:	e004      	b.n	8001996 <HAL_GPIO_Init+0x1e2>
 800198c:	2303      	movs	r3, #3
 800198e:	e002      	b.n	8001996 <HAL_GPIO_Init+0x1e2>
 8001990:	2301      	movs	r3, #1
 8001992:	e000      	b.n	8001996 <HAL_GPIO_Init+0x1e2>
 8001994:	2300      	movs	r3, #0
 8001996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001998:	f002 0203 	and.w	r2, r2, #3
 800199c:	0092      	lsls	r2, r2, #2
 800199e:	4093      	lsls	r3, r2
 80019a0:	68fa      	ldr	r2, [r7, #12]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019a6:	492f      	ldr	r1, [pc, #188]	; (8001a64 <HAL_GPIO_Init+0x2b0>)
 80019a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019aa:	089b      	lsrs	r3, r3, #2
 80019ac:	3302      	adds	r3, #2
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d006      	beq.n	80019ce <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019c0:	4b2c      	ldr	r3, [pc, #176]	; (8001a74 <HAL_GPIO_Init+0x2c0>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	492b      	ldr	r1, [pc, #172]	; (8001a74 <HAL_GPIO_Init+0x2c0>)
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	600b      	str	r3, [r1, #0]
 80019cc:	e006      	b.n	80019dc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019ce:	4b29      	ldr	r3, [pc, #164]	; (8001a74 <HAL_GPIO_Init+0x2c0>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	43db      	mvns	r3, r3
 80019d6:	4927      	ldr	r1, [pc, #156]	; (8001a74 <HAL_GPIO_Init+0x2c0>)
 80019d8:	4013      	ands	r3, r2
 80019da:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d006      	beq.n	80019f6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019e8:	4b22      	ldr	r3, [pc, #136]	; (8001a74 <HAL_GPIO_Init+0x2c0>)
 80019ea:	685a      	ldr	r2, [r3, #4]
 80019ec:	4921      	ldr	r1, [pc, #132]	; (8001a74 <HAL_GPIO_Init+0x2c0>)
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	604b      	str	r3, [r1, #4]
 80019f4:	e006      	b.n	8001a04 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019f6:	4b1f      	ldr	r3, [pc, #124]	; (8001a74 <HAL_GPIO_Init+0x2c0>)
 80019f8:	685a      	ldr	r2, [r3, #4]
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	43db      	mvns	r3, r3
 80019fe:	491d      	ldr	r1, [pc, #116]	; (8001a74 <HAL_GPIO_Init+0x2c0>)
 8001a00:	4013      	ands	r3, r2
 8001a02:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d006      	beq.n	8001a1e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a10:	4b18      	ldr	r3, [pc, #96]	; (8001a74 <HAL_GPIO_Init+0x2c0>)
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	4917      	ldr	r1, [pc, #92]	; (8001a74 <HAL_GPIO_Init+0x2c0>)
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	608b      	str	r3, [r1, #8]
 8001a1c:	e006      	b.n	8001a2c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a1e:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <HAL_GPIO_Init+0x2c0>)
 8001a20:	689a      	ldr	r2, [r3, #8]
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	43db      	mvns	r3, r3
 8001a26:	4913      	ldr	r1, [pc, #76]	; (8001a74 <HAL_GPIO_Init+0x2c0>)
 8001a28:	4013      	ands	r3, r2
 8001a2a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d01f      	beq.n	8001a78 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a38:	4b0e      	ldr	r3, [pc, #56]	; (8001a74 <HAL_GPIO_Init+0x2c0>)
 8001a3a:	68da      	ldr	r2, [r3, #12]
 8001a3c:	490d      	ldr	r1, [pc, #52]	; (8001a74 <HAL_GPIO_Init+0x2c0>)
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	60cb      	str	r3, [r1, #12]
 8001a44:	e01f      	b.n	8001a86 <HAL_GPIO_Init+0x2d2>
 8001a46:	bf00      	nop
 8001a48:	10320000 	.word	0x10320000
 8001a4c:	10310000 	.word	0x10310000
 8001a50:	10220000 	.word	0x10220000
 8001a54:	10210000 	.word	0x10210000
 8001a58:	10120000 	.word	0x10120000
 8001a5c:	10110000 	.word	0x10110000
 8001a60:	40021000 	.word	0x40021000
 8001a64:	40010000 	.word	0x40010000
 8001a68:	40010800 	.word	0x40010800
 8001a6c:	40010c00 	.word	0x40010c00
 8001a70:	40011000 	.word	0x40011000
 8001a74:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a78:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <HAL_GPIO_Init+0x2f4>)
 8001a7a:	68da      	ldr	r2, [r3, #12]
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	4909      	ldr	r1, [pc, #36]	; (8001aa8 <HAL_GPIO_Init+0x2f4>)
 8001a82:	4013      	ands	r3, r2
 8001a84:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a88:	3301      	adds	r3, #1
 8001a8a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a92:	fa22 f303 	lsr.w	r3, r2, r3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f47f ae96 	bne.w	80017c8 <HAL_GPIO_Init+0x14>
  }
}
 8001a9c:	bf00      	nop
 8001a9e:	bf00      	nop
 8001aa0:	372c      	adds	r7, #44	; 0x2c
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bc80      	pop	{r7}
 8001aa6:	4770      	bx	lr
 8001aa8:	40010400 	.word	0x40010400

08001aac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689a      	ldr	r2, [r3, #8]
 8001abc:	887b      	ldrh	r3, [r7, #2]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d002      	beq.n	8001aca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	73fb      	strb	r3, [r7, #15]
 8001ac8:	e001      	b.n	8001ace <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001aca:	2300      	movs	r3, #0
 8001acc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3714      	adds	r7, #20
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bc80      	pop	{r7}
 8001ad8:	4770      	bx	lr

08001ada <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ada:	b480      	push	{r7}
 8001adc:	b083      	sub	sp, #12
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	807b      	strh	r3, [r7, #2]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001aea:	787b      	ldrb	r3, [r7, #1]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d003      	beq.n	8001af8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001af0:	887a      	ldrh	r2, [r7, #2]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001af6:	e003      	b.n	8001b00 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001af8:	887b      	ldrh	r3, [r7, #2]
 8001afa:	041a      	lsls	r2, r3, #16
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	611a      	str	r2, [r3, #16]
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bc80      	pop	{r7}
 8001b08:	4770      	bx	lr

08001b0a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b085      	sub	sp, #20
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
 8001b12:	460b      	mov	r3, r1
 8001b14:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b1c:	887a      	ldrh	r2, [r7, #2]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	4013      	ands	r3, r2
 8001b22:	041a      	lsls	r2, r3, #16
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	43d9      	mvns	r1, r3
 8001b28:	887b      	ldrh	r3, [r7, #2]
 8001b2a:	400b      	ands	r3, r1
 8001b2c:	431a      	orrs	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	611a      	str	r2, [r3, #16]
}
 8001b32:	bf00      	nop
 8001b34:	3714      	adds	r7, #20
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr

08001b3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d101      	bne.n	8001b4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e272      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f000 8087 	beq.w	8001c6a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b5c:	4b92      	ldr	r3, [pc, #584]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 030c 	and.w	r3, r3, #12
 8001b64:	2b04      	cmp	r3, #4
 8001b66:	d00c      	beq.n	8001b82 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b68:	4b8f      	ldr	r3, [pc, #572]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f003 030c 	and.w	r3, r3, #12
 8001b70:	2b08      	cmp	r3, #8
 8001b72:	d112      	bne.n	8001b9a <HAL_RCC_OscConfig+0x5e>
 8001b74:	4b8c      	ldr	r3, [pc, #560]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b80:	d10b      	bne.n	8001b9a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b82:	4b89      	ldr	r3, [pc, #548]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d06c      	beq.n	8001c68 <HAL_RCC_OscConfig+0x12c>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d168      	bne.n	8001c68 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e24c      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ba2:	d106      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x76>
 8001ba4:	4b80      	ldr	r3, [pc, #512]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a7f      	ldr	r2, [pc, #508]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001baa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bae:	6013      	str	r3, [r2, #0]
 8001bb0:	e02e      	b.n	8001c10 <HAL_RCC_OscConfig+0xd4>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d10c      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x98>
 8001bba:	4b7b      	ldr	r3, [pc, #492]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a7a      	ldr	r2, [pc, #488]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bc4:	6013      	str	r3, [r2, #0]
 8001bc6:	4b78      	ldr	r3, [pc, #480]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a77      	ldr	r2, [pc, #476]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bd0:	6013      	str	r3, [r2, #0]
 8001bd2:	e01d      	b.n	8001c10 <HAL_RCC_OscConfig+0xd4>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bdc:	d10c      	bne.n	8001bf8 <HAL_RCC_OscConfig+0xbc>
 8001bde:	4b72      	ldr	r3, [pc, #456]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a71      	ldr	r2, [pc, #452]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001be4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001be8:	6013      	str	r3, [r2, #0]
 8001bea:	4b6f      	ldr	r3, [pc, #444]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a6e      	ldr	r2, [pc, #440]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf4:	6013      	str	r3, [r2, #0]
 8001bf6:	e00b      	b.n	8001c10 <HAL_RCC_OscConfig+0xd4>
 8001bf8:	4b6b      	ldr	r3, [pc, #428]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a6a      	ldr	r2, [pc, #424]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c02:	6013      	str	r3, [r2, #0]
 8001c04:	4b68      	ldr	r3, [pc, #416]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a67      	ldr	r2, [pc, #412]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001c0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c0e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d013      	beq.n	8001c40 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c18:	f7ff fcb4 	bl	8001584 <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c20:	f7ff fcb0 	bl	8001584 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b64      	cmp	r3, #100	; 0x64
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e200      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c32:	4b5d      	ldr	r3, [pc, #372]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d0f0      	beq.n	8001c20 <HAL_RCC_OscConfig+0xe4>
 8001c3e:	e014      	b.n	8001c6a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c40:	f7ff fca0 	bl	8001584 <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c48:	f7ff fc9c 	bl	8001584 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b64      	cmp	r3, #100	; 0x64
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e1ec      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c5a:	4b53      	ldr	r3, [pc, #332]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1f0      	bne.n	8001c48 <HAL_RCC_OscConfig+0x10c>
 8001c66:	e000      	b.n	8001c6a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d063      	beq.n	8001d3e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c76:	4b4c      	ldr	r3, [pc, #304]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f003 030c 	and.w	r3, r3, #12
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d00b      	beq.n	8001c9a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c82:	4b49      	ldr	r3, [pc, #292]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f003 030c 	and.w	r3, r3, #12
 8001c8a:	2b08      	cmp	r3, #8
 8001c8c:	d11c      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x18c>
 8001c8e:	4b46      	ldr	r3, [pc, #280]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d116      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c9a:	4b43      	ldr	r3, [pc, #268]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d005      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x176>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d001      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e1c0      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb2:	4b3d      	ldr	r3, [pc, #244]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	4939      	ldr	r1, [pc, #228]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cc6:	e03a      	b.n	8001d3e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	691b      	ldr	r3, [r3, #16]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d020      	beq.n	8001d12 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cd0:	4b36      	ldr	r3, [pc, #216]	; (8001dac <HAL_RCC_OscConfig+0x270>)
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd6:	f7ff fc55 	bl	8001584 <HAL_GetTick>
 8001cda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cdc:	e008      	b.n	8001cf0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cde:	f7ff fc51 	bl	8001584 <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e1a1      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf0:	4b2d      	ldr	r3, [pc, #180]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d0f0      	beq.n	8001cde <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cfc:	4b2a      	ldr	r3, [pc, #168]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	695b      	ldr	r3, [r3, #20]
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	4927      	ldr	r1, [pc, #156]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	600b      	str	r3, [r1, #0]
 8001d10:	e015      	b.n	8001d3e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d12:	4b26      	ldr	r3, [pc, #152]	; (8001dac <HAL_RCC_OscConfig+0x270>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d18:	f7ff fc34 	bl	8001584 <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d20:	f7ff fc30 	bl	8001584 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e180      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d32:	4b1d      	ldr	r3, [pc, #116]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1f0      	bne.n	8001d20 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0308 	and.w	r3, r3, #8
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d03a      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d019      	beq.n	8001d86 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d52:	4b17      	ldr	r3, [pc, #92]	; (8001db0 <HAL_RCC_OscConfig+0x274>)
 8001d54:	2201      	movs	r2, #1
 8001d56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d58:	f7ff fc14 	bl	8001584 <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d60:	f7ff fc10 	bl	8001584 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e160      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d72:	4b0d      	ldr	r3, [pc, #52]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d0f0      	beq.n	8001d60 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d7e:	2001      	movs	r0, #1
 8001d80:	f000 faa6 	bl	80022d0 <RCC_Delay>
 8001d84:	e01c      	b.n	8001dc0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d86:	4b0a      	ldr	r3, [pc, #40]	; (8001db0 <HAL_RCC_OscConfig+0x274>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d8c:	f7ff fbfa 	bl	8001584 <HAL_GetTick>
 8001d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d92:	e00f      	b.n	8001db4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d94:	f7ff fbf6 	bl	8001584 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d908      	bls.n	8001db4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e146      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
 8001da6:	bf00      	nop
 8001da8:	40021000 	.word	0x40021000
 8001dac:	42420000 	.word	0x42420000
 8001db0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db4:	4b92      	ldr	r3, [pc, #584]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d1e9      	bne.n	8001d94 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	f000 80a6 	beq.w	8001f1a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dd2:	4b8b      	ldr	r3, [pc, #556]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d10d      	bne.n	8001dfa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dde:	4b88      	ldr	r3, [pc, #544]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	4a87      	ldr	r2, [pc, #540]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de8:	61d3      	str	r3, [r2, #28]
 8001dea:	4b85      	ldr	r3, [pc, #532]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df2:	60bb      	str	r3, [r7, #8]
 8001df4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001df6:	2301      	movs	r3, #1
 8001df8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dfa:	4b82      	ldr	r3, [pc, #520]	; (8002004 <HAL_RCC_OscConfig+0x4c8>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d118      	bne.n	8001e38 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e06:	4b7f      	ldr	r3, [pc, #508]	; (8002004 <HAL_RCC_OscConfig+0x4c8>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a7e      	ldr	r2, [pc, #504]	; (8002004 <HAL_RCC_OscConfig+0x4c8>)
 8001e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e12:	f7ff fbb7 	bl	8001584 <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e1a:	f7ff fbb3 	bl	8001584 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b64      	cmp	r3, #100	; 0x64
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e103      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e2c:	4b75      	ldr	r3, [pc, #468]	; (8002004 <HAL_RCC_OscConfig+0x4c8>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d0f0      	beq.n	8001e1a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d106      	bne.n	8001e4e <HAL_RCC_OscConfig+0x312>
 8001e40:	4b6f      	ldr	r3, [pc, #444]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	4a6e      	ldr	r2, [pc, #440]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	6213      	str	r3, [r2, #32]
 8001e4c:	e02d      	b.n	8001eaa <HAL_RCC_OscConfig+0x36e>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d10c      	bne.n	8001e70 <HAL_RCC_OscConfig+0x334>
 8001e56:	4b6a      	ldr	r3, [pc, #424]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001e58:	6a1b      	ldr	r3, [r3, #32]
 8001e5a:	4a69      	ldr	r2, [pc, #420]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001e5c:	f023 0301 	bic.w	r3, r3, #1
 8001e60:	6213      	str	r3, [r2, #32]
 8001e62:	4b67      	ldr	r3, [pc, #412]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	4a66      	ldr	r2, [pc, #408]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001e68:	f023 0304 	bic.w	r3, r3, #4
 8001e6c:	6213      	str	r3, [r2, #32]
 8001e6e:	e01c      	b.n	8001eaa <HAL_RCC_OscConfig+0x36e>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	2b05      	cmp	r3, #5
 8001e76:	d10c      	bne.n	8001e92 <HAL_RCC_OscConfig+0x356>
 8001e78:	4b61      	ldr	r3, [pc, #388]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	4a60      	ldr	r2, [pc, #384]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001e7e:	f043 0304 	orr.w	r3, r3, #4
 8001e82:	6213      	str	r3, [r2, #32]
 8001e84:	4b5e      	ldr	r3, [pc, #376]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	4a5d      	ldr	r2, [pc, #372]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001e8a:	f043 0301 	orr.w	r3, r3, #1
 8001e8e:	6213      	str	r3, [r2, #32]
 8001e90:	e00b      	b.n	8001eaa <HAL_RCC_OscConfig+0x36e>
 8001e92:	4b5b      	ldr	r3, [pc, #364]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001e94:	6a1b      	ldr	r3, [r3, #32]
 8001e96:	4a5a      	ldr	r2, [pc, #360]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001e98:	f023 0301 	bic.w	r3, r3, #1
 8001e9c:	6213      	str	r3, [r2, #32]
 8001e9e:	4b58      	ldr	r3, [pc, #352]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001ea0:	6a1b      	ldr	r3, [r3, #32]
 8001ea2:	4a57      	ldr	r2, [pc, #348]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001ea4:	f023 0304 	bic.w	r3, r3, #4
 8001ea8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d015      	beq.n	8001ede <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb2:	f7ff fb67 	bl	8001584 <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb8:	e00a      	b.n	8001ed0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eba:	f7ff fb63 	bl	8001584 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e0b1      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed0:	4b4b      	ldr	r3, [pc, #300]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0ee      	beq.n	8001eba <HAL_RCC_OscConfig+0x37e>
 8001edc:	e014      	b.n	8001f08 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ede:	f7ff fb51 	bl	8001584 <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ee4:	e00a      	b.n	8001efc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ee6:	f7ff fb4d 	bl	8001584 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e09b      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001efc:	4b40      	ldr	r3, [pc, #256]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d1ee      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f08:	7dfb      	ldrb	r3, [r7, #23]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d105      	bne.n	8001f1a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f0e:	4b3c      	ldr	r3, [pc, #240]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	4a3b      	ldr	r2, [pc, #236]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001f14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f18:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f000 8087 	beq.w	8002032 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f24:	4b36      	ldr	r3, [pc, #216]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f003 030c 	and.w	r3, r3, #12
 8001f2c:	2b08      	cmp	r3, #8
 8001f2e:	d061      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	69db      	ldr	r3, [r3, #28]
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d146      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f38:	4b33      	ldr	r3, [pc, #204]	; (8002008 <HAL_RCC_OscConfig+0x4cc>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3e:	f7ff fb21 	bl	8001584 <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f44:	e008      	b.n	8001f58 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f46:	f7ff fb1d 	bl	8001584 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e06d      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f58:	4b29      	ldr	r3, [pc, #164]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1f0      	bne.n	8001f46 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f6c:	d108      	bne.n	8001f80 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f6e:	4b24      	ldr	r3, [pc, #144]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	4921      	ldr	r1, [pc, #132]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f80:	4b1f      	ldr	r3, [pc, #124]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a19      	ldr	r1, [r3, #32]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f90:	430b      	orrs	r3, r1
 8001f92:	491b      	ldr	r1, [pc, #108]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f98:	4b1b      	ldr	r3, [pc, #108]	; (8002008 <HAL_RCC_OscConfig+0x4cc>)
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9e:	f7ff faf1 	bl	8001584 <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa6:	f7ff faed 	bl	8001584 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e03d      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fb8:	4b11      	ldr	r3, [pc, #68]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d0f0      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x46a>
 8001fc4:	e035      	b.n	8002032 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fc6:	4b10      	ldr	r3, [pc, #64]	; (8002008 <HAL_RCC_OscConfig+0x4cc>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fcc:	f7ff fada 	bl	8001584 <HAL_GetTick>
 8001fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd4:	f7ff fad6 	bl	8001584 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e026      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fe6:	4b06      	ldr	r3, [pc, #24]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1f0      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x498>
 8001ff2:	e01e      	b.n	8002032 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	69db      	ldr	r3, [r3, #28]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d107      	bne.n	800200c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e019      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
 8002000:	40021000 	.word	0x40021000
 8002004:	40007000 	.word	0x40007000
 8002008:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800200c:	4b0b      	ldr	r3, [pc, #44]	; (800203c <HAL_RCC_OscConfig+0x500>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	429a      	cmp	r2, r3
 800201e:	d106      	bne.n	800202e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800202a:	429a      	cmp	r2, r3
 800202c:	d001      	beq.n	8002032 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e000      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3718      	adds	r7, #24
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40021000 	.word	0x40021000

08002040 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e0d0      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002054:	4b6a      	ldr	r3, [pc, #424]	; (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0307 	and.w	r3, r3, #7
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	429a      	cmp	r2, r3
 8002060:	d910      	bls.n	8002084 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002062:	4b67      	ldr	r3, [pc, #412]	; (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f023 0207 	bic.w	r2, r3, #7
 800206a:	4965      	ldr	r1, [pc, #404]	; (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	4313      	orrs	r3, r2
 8002070:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002072:	4b63      	ldr	r3, [pc, #396]	; (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	429a      	cmp	r2, r3
 800207e:	d001      	beq.n	8002084 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e0b8      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d020      	beq.n	80020d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	2b00      	cmp	r3, #0
 800209a:	d005      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800209c:	4b59      	ldr	r3, [pc, #356]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	4a58      	ldr	r2, [pc, #352]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80020a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0308 	and.w	r3, r3, #8
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d005      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020b4:	4b53      	ldr	r3, [pc, #332]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	4a52      	ldr	r2, [pc, #328]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80020ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020c0:	4b50      	ldr	r3, [pc, #320]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	494d      	ldr	r1, [pc, #308]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d040      	beq.n	8002160 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d107      	bne.n	80020f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e6:	4b47      	ldr	r3, [pc, #284]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d115      	bne.n	800211e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e07f      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d107      	bne.n	800210e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020fe:	4b41      	ldr	r3, [pc, #260]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d109      	bne.n	800211e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e073      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800210e:	4b3d      	ldr	r3, [pc, #244]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e06b      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800211e:	4b39      	ldr	r3, [pc, #228]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f023 0203 	bic.w	r2, r3, #3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	4936      	ldr	r1, [pc, #216]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 800212c:	4313      	orrs	r3, r2
 800212e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002130:	f7ff fa28 	bl	8001584 <HAL_GetTick>
 8002134:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002136:	e00a      	b.n	800214e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002138:	f7ff fa24 	bl	8001584 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	f241 3288 	movw	r2, #5000	; 0x1388
 8002146:	4293      	cmp	r3, r2
 8002148:	d901      	bls.n	800214e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e053      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800214e:	4b2d      	ldr	r3, [pc, #180]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f003 020c 	and.w	r2, r3, #12
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	429a      	cmp	r2, r3
 800215e:	d1eb      	bne.n	8002138 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002160:	4b27      	ldr	r3, [pc, #156]	; (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	429a      	cmp	r2, r3
 800216c:	d210      	bcs.n	8002190 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216e:	4b24      	ldr	r3, [pc, #144]	; (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f023 0207 	bic.w	r2, r3, #7
 8002176:	4922      	ldr	r1, [pc, #136]	; (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	4313      	orrs	r3, r2
 800217c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800217e:	4b20      	ldr	r3, [pc, #128]	; (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	429a      	cmp	r2, r3
 800218a:	d001      	beq.n	8002190 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e032      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	2b00      	cmp	r3, #0
 800219a:	d008      	beq.n	80021ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800219c:	4b19      	ldr	r3, [pc, #100]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	4916      	ldr	r1, [pc, #88]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d009      	beq.n	80021ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021ba:	4b12      	ldr	r3, [pc, #72]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	490e      	ldr	r1, [pc, #56]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021ce:	f000 f821 	bl	8002214 <HAL_RCC_GetSysClockFreq>
 80021d2:	4602      	mov	r2, r0
 80021d4:	4b0b      	ldr	r3, [pc, #44]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	091b      	lsrs	r3, r3, #4
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	490a      	ldr	r1, [pc, #40]	; (8002208 <HAL_RCC_ClockConfig+0x1c8>)
 80021e0:	5ccb      	ldrb	r3, [r1, r3]
 80021e2:	fa22 f303 	lsr.w	r3, r2, r3
 80021e6:	4a09      	ldr	r2, [pc, #36]	; (800220c <HAL_RCC_ClockConfig+0x1cc>)
 80021e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021ea:	4b09      	ldr	r3, [pc, #36]	; (8002210 <HAL_RCC_ClockConfig+0x1d0>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff f986 	bl	8001500 <HAL_InitTick>

  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40022000 	.word	0x40022000
 8002204:	40021000 	.word	0x40021000
 8002208:	08002b54 	.word	0x08002b54
 800220c:	20000024 	.word	0x20000024
 8002210:	20000028 	.word	0x20000028

08002214 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002214:	b490      	push	{r4, r7}
 8002216:	b08a      	sub	sp, #40	; 0x28
 8002218:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800221a:	4b29      	ldr	r3, [pc, #164]	; (80022c0 <HAL_RCC_GetSysClockFreq+0xac>)
 800221c:	1d3c      	adds	r4, r7, #4
 800221e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002220:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002224:	f240 2301 	movw	r3, #513	; 0x201
 8002228:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800222a:	2300      	movs	r3, #0
 800222c:	61fb      	str	r3, [r7, #28]
 800222e:	2300      	movs	r3, #0
 8002230:	61bb      	str	r3, [r7, #24]
 8002232:	2300      	movs	r3, #0
 8002234:	627b      	str	r3, [r7, #36]	; 0x24
 8002236:	2300      	movs	r3, #0
 8002238:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800223a:	2300      	movs	r3, #0
 800223c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800223e:	4b21      	ldr	r3, [pc, #132]	; (80022c4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	f003 030c 	and.w	r3, r3, #12
 800224a:	2b04      	cmp	r3, #4
 800224c:	d002      	beq.n	8002254 <HAL_RCC_GetSysClockFreq+0x40>
 800224e:	2b08      	cmp	r3, #8
 8002250:	d003      	beq.n	800225a <HAL_RCC_GetSysClockFreq+0x46>
 8002252:	e02b      	b.n	80022ac <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002254:	4b1c      	ldr	r3, [pc, #112]	; (80022c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002256:	623b      	str	r3, [r7, #32]
      break;
 8002258:	e02b      	b.n	80022b2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	0c9b      	lsrs	r3, r3, #18
 800225e:	f003 030f 	and.w	r3, r3, #15
 8002262:	3328      	adds	r3, #40	; 0x28
 8002264:	443b      	add	r3, r7
 8002266:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800226a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d012      	beq.n	800229c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002276:	4b13      	ldr	r3, [pc, #76]	; (80022c4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	0c5b      	lsrs	r3, r3, #17
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	3328      	adds	r3, #40	; 0x28
 8002282:	443b      	add	r3, r7
 8002284:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002288:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	4a0e      	ldr	r2, [pc, #56]	; (80022c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800228e:	fb03 f202 	mul.w	r2, r3, r2
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	fbb2 f3f3 	udiv	r3, r2, r3
 8002298:	627b      	str	r3, [r7, #36]	; 0x24
 800229a:	e004      	b.n	80022a6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	4a0b      	ldr	r2, [pc, #44]	; (80022cc <HAL_RCC_GetSysClockFreq+0xb8>)
 80022a0:	fb02 f303 	mul.w	r3, r2, r3
 80022a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	623b      	str	r3, [r7, #32]
      break;
 80022aa:	e002      	b.n	80022b2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022ac:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022ae:	623b      	str	r3, [r7, #32]
      break;
 80022b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022b2:	6a3b      	ldr	r3, [r7, #32]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3728      	adds	r7, #40	; 0x28
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bc90      	pop	{r4, r7}
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	08002b44 	.word	0x08002b44
 80022c4:	40021000 	.word	0x40021000
 80022c8:	007a1200 	.word	0x007a1200
 80022cc:	003d0900 	.word	0x003d0900

080022d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022d8:	4b0a      	ldr	r3, [pc, #40]	; (8002304 <RCC_Delay+0x34>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a0a      	ldr	r2, [pc, #40]	; (8002308 <RCC_Delay+0x38>)
 80022de:	fba2 2303 	umull	r2, r3, r2, r3
 80022e2:	0a5b      	lsrs	r3, r3, #9
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	fb02 f303 	mul.w	r3, r2, r3
 80022ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022ec:	bf00      	nop
  }
  while (Delay --);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	1e5a      	subs	r2, r3, #1
 80022f2:	60fa      	str	r2, [r7, #12]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1f9      	bne.n	80022ec <RCC_Delay+0x1c>
}
 80022f8:	bf00      	nop
 80022fa:	bf00      	nop
 80022fc:	3714      	adds	r7, #20
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr
 8002304:	20000024 	.word	0x20000024
 8002308:	10624dd3 	.word	0x10624dd3

0800230c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e041      	b.n	80023a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d106      	bne.n	8002338 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f7ff f84c 	bl	80013d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2202      	movs	r2, #2
 800233c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	3304      	adds	r3, #4
 8002348:	4619      	mov	r1, r3
 800234a:	4610      	mov	r0, r2
 800234c:	f000 fa6a 	bl	8002824 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
	...

080023ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d001      	beq.n	80023c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e035      	b.n	8002430 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2202      	movs	r2, #2
 80023c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68da      	ldr	r2, [r3, #12]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f042 0201 	orr.w	r2, r2, #1
 80023da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a16      	ldr	r2, [pc, #88]	; (800243c <HAL_TIM_Base_Start_IT+0x90>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d009      	beq.n	80023fa <HAL_TIM_Base_Start_IT+0x4e>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ee:	d004      	beq.n	80023fa <HAL_TIM_Base_Start_IT+0x4e>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a12      	ldr	r2, [pc, #72]	; (8002440 <HAL_TIM_Base_Start_IT+0x94>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d111      	bne.n	800241e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f003 0307 	and.w	r3, r3, #7
 8002404:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2b06      	cmp	r3, #6
 800240a:	d010      	beq.n	800242e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f042 0201 	orr.w	r2, r2, #1
 800241a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800241c:	e007      	b.n	800242e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f042 0201 	orr.w	r2, r2, #1
 800242c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800242e:	2300      	movs	r3, #0
}
 8002430:	4618      	mov	r0, r3
 8002432:	3714      	adds	r7, #20
 8002434:	46bd      	mov	sp, r7
 8002436:	bc80      	pop	{r7}
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	40012c00 	.word	0x40012c00
 8002440:	40000400 	.word	0x40000400

08002444 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b02      	cmp	r3, #2
 8002458:	d122      	bne.n	80024a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b02      	cmp	r3, #2
 8002466:	d11b      	bne.n	80024a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f06f 0202 	mvn.w	r2, #2
 8002470:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2201      	movs	r2, #1
 8002476:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	f003 0303 	and.w	r3, r3, #3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f9b1 	bl	80027ee <HAL_TIM_IC_CaptureCallback>
 800248c:	e005      	b.n	800249a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 f9a4 	bl	80027dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 f9b3 	bl	8002800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	f003 0304 	and.w	r3, r3, #4
 80024aa:	2b04      	cmp	r3, #4
 80024ac:	d122      	bne.n	80024f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	f003 0304 	and.w	r3, r3, #4
 80024b8:	2b04      	cmp	r3, #4
 80024ba:	d11b      	bne.n	80024f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f06f 0204 	mvn.w	r2, #4
 80024c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2202      	movs	r2, #2
 80024ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 f987 	bl	80027ee <HAL_TIM_IC_CaptureCallback>
 80024e0:	e005      	b.n	80024ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 f97a 	bl	80027dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f000 f989 	bl	8002800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	f003 0308 	and.w	r3, r3, #8
 80024fe:	2b08      	cmp	r3, #8
 8002500:	d122      	bne.n	8002548 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	f003 0308 	and.w	r3, r3, #8
 800250c:	2b08      	cmp	r3, #8
 800250e:	d11b      	bne.n	8002548 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f06f 0208 	mvn.w	r2, #8
 8002518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2204      	movs	r2, #4
 800251e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	f003 0303 	and.w	r3, r3, #3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 f95d 	bl	80027ee <HAL_TIM_IC_CaptureCallback>
 8002534:	e005      	b.n	8002542 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 f950 	bl	80027dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f000 f95f 	bl	8002800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	f003 0310 	and.w	r3, r3, #16
 8002552:	2b10      	cmp	r3, #16
 8002554:	d122      	bne.n	800259c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	f003 0310 	and.w	r3, r3, #16
 8002560:	2b10      	cmp	r3, #16
 8002562:	d11b      	bne.n	800259c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f06f 0210 	mvn.w	r2, #16
 800256c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2208      	movs	r2, #8
 8002572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	69db      	ldr	r3, [r3, #28]
 800257a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800257e:	2b00      	cmp	r3, #0
 8002580:	d003      	beq.n	800258a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 f933 	bl	80027ee <HAL_TIM_IC_CaptureCallback>
 8002588:	e005      	b.n	8002596 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f926 	bl	80027dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f000 f935 	bl	8002800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d10e      	bne.n	80025c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d107      	bne.n	80025c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f06f 0201 	mvn.w	r2, #1
 80025c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7fe fe4a 	bl	800125c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025d2:	2b80      	cmp	r3, #128	; 0x80
 80025d4:	d10e      	bne.n	80025f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025e0:	2b80      	cmp	r3, #128	; 0x80
 80025e2:	d107      	bne.n	80025f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 fa67 	bl	8002ac2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025fe:	2b40      	cmp	r3, #64	; 0x40
 8002600:	d10e      	bne.n	8002620 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800260c:	2b40      	cmp	r3, #64	; 0x40
 800260e:	d107      	bne.n	8002620 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 f8f9 	bl	8002812 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	f003 0320 	and.w	r3, r3, #32
 800262a:	2b20      	cmp	r3, #32
 800262c:	d10e      	bne.n	800264c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	f003 0320 	and.w	r3, r3, #32
 8002638:	2b20      	cmp	r3, #32
 800263a:	d107      	bne.n	800264c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f06f 0220 	mvn.w	r2, #32
 8002644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 fa32 	bl	8002ab0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800264c:	bf00      	nop
 800264e:	3708      	adds	r7, #8
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002664:	2b01      	cmp	r3, #1
 8002666:	d101      	bne.n	800266c <HAL_TIM_ConfigClockSource+0x18>
 8002668:	2302      	movs	r3, #2
 800266a:	e0b3      	b.n	80027d4 <HAL_TIM_ConfigClockSource+0x180>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2202      	movs	r2, #2
 8002678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800268a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002692:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026a4:	d03e      	beq.n	8002724 <HAL_TIM_ConfigClockSource+0xd0>
 80026a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026aa:	f200 8087 	bhi.w	80027bc <HAL_TIM_ConfigClockSource+0x168>
 80026ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026b2:	f000 8085 	beq.w	80027c0 <HAL_TIM_ConfigClockSource+0x16c>
 80026b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026ba:	d87f      	bhi.n	80027bc <HAL_TIM_ConfigClockSource+0x168>
 80026bc:	2b70      	cmp	r3, #112	; 0x70
 80026be:	d01a      	beq.n	80026f6 <HAL_TIM_ConfigClockSource+0xa2>
 80026c0:	2b70      	cmp	r3, #112	; 0x70
 80026c2:	d87b      	bhi.n	80027bc <HAL_TIM_ConfigClockSource+0x168>
 80026c4:	2b60      	cmp	r3, #96	; 0x60
 80026c6:	d050      	beq.n	800276a <HAL_TIM_ConfigClockSource+0x116>
 80026c8:	2b60      	cmp	r3, #96	; 0x60
 80026ca:	d877      	bhi.n	80027bc <HAL_TIM_ConfigClockSource+0x168>
 80026cc:	2b50      	cmp	r3, #80	; 0x50
 80026ce:	d03c      	beq.n	800274a <HAL_TIM_ConfigClockSource+0xf6>
 80026d0:	2b50      	cmp	r3, #80	; 0x50
 80026d2:	d873      	bhi.n	80027bc <HAL_TIM_ConfigClockSource+0x168>
 80026d4:	2b40      	cmp	r3, #64	; 0x40
 80026d6:	d058      	beq.n	800278a <HAL_TIM_ConfigClockSource+0x136>
 80026d8:	2b40      	cmp	r3, #64	; 0x40
 80026da:	d86f      	bhi.n	80027bc <HAL_TIM_ConfigClockSource+0x168>
 80026dc:	2b30      	cmp	r3, #48	; 0x30
 80026de:	d064      	beq.n	80027aa <HAL_TIM_ConfigClockSource+0x156>
 80026e0:	2b30      	cmp	r3, #48	; 0x30
 80026e2:	d86b      	bhi.n	80027bc <HAL_TIM_ConfigClockSource+0x168>
 80026e4:	2b20      	cmp	r3, #32
 80026e6:	d060      	beq.n	80027aa <HAL_TIM_ConfigClockSource+0x156>
 80026e8:	2b20      	cmp	r3, #32
 80026ea:	d867      	bhi.n	80027bc <HAL_TIM_ConfigClockSource+0x168>
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d05c      	beq.n	80027aa <HAL_TIM_ConfigClockSource+0x156>
 80026f0:	2b10      	cmp	r3, #16
 80026f2:	d05a      	beq.n	80027aa <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80026f4:	e062      	b.n	80027bc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6818      	ldr	r0, [r3, #0]
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	6899      	ldr	r1, [r3, #8]
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685a      	ldr	r2, [r3, #4]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	f000 f95c 	bl	80029c2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002718:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	609a      	str	r2, [r3, #8]
      break;
 8002722:	e04e      	b.n	80027c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6818      	ldr	r0, [r3, #0]
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	6899      	ldr	r1, [r3, #8]
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685a      	ldr	r2, [r3, #4]
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	f000 f945 	bl	80029c2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	689a      	ldr	r2, [r3, #8]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002746:	609a      	str	r2, [r3, #8]
      break;
 8002748:	e03b      	b.n	80027c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6818      	ldr	r0, [r3, #0]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	6859      	ldr	r1, [r3, #4]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	461a      	mov	r2, r3
 8002758:	f000 f8bc 	bl	80028d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2150      	movs	r1, #80	; 0x50
 8002762:	4618      	mov	r0, r3
 8002764:	f000 f913 	bl	800298e <TIM_ITRx_SetConfig>
      break;
 8002768:	e02b      	b.n	80027c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6818      	ldr	r0, [r3, #0]
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	6859      	ldr	r1, [r3, #4]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	461a      	mov	r2, r3
 8002778:	f000 f8da 	bl	8002930 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2160      	movs	r1, #96	; 0x60
 8002782:	4618      	mov	r0, r3
 8002784:	f000 f903 	bl	800298e <TIM_ITRx_SetConfig>
      break;
 8002788:	e01b      	b.n	80027c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6818      	ldr	r0, [r3, #0]
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	6859      	ldr	r1, [r3, #4]
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	461a      	mov	r2, r3
 8002798:	f000 f89c 	bl	80028d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2140      	movs	r1, #64	; 0x40
 80027a2:	4618      	mov	r0, r3
 80027a4:	f000 f8f3 	bl	800298e <TIM_ITRx_SetConfig>
      break;
 80027a8:	e00b      	b.n	80027c2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4619      	mov	r1, r3
 80027b4:	4610      	mov	r0, r2
 80027b6:	f000 f8ea 	bl	800298e <TIM_ITRx_SetConfig>
        break;
 80027ba:	e002      	b.n	80027c2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80027bc:	bf00      	nop
 80027be:	e000      	b.n	80027c2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80027c0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bc80      	pop	{r7}
 80027ec:	4770      	bx	lr

080027ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr

08002800 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	bc80      	pop	{r7}
 8002810:	4770      	bx	lr

08002812 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002812:	b480      	push	{r7}
 8002814:	b083      	sub	sp, #12
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	bc80      	pop	{r7}
 8002822:	4770      	bx	lr

08002824 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a25      	ldr	r2, [pc, #148]	; (80028cc <TIM_Base_SetConfig+0xa8>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d007      	beq.n	800284c <TIM_Base_SetConfig+0x28>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002842:	d003      	beq.n	800284c <TIM_Base_SetConfig+0x28>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a22      	ldr	r2, [pc, #136]	; (80028d0 <TIM_Base_SetConfig+0xac>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d108      	bne.n	800285e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002852:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	4313      	orrs	r3, r2
 800285c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a1a      	ldr	r2, [pc, #104]	; (80028cc <TIM_Base_SetConfig+0xa8>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d007      	beq.n	8002876 <TIM_Base_SetConfig+0x52>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800286c:	d003      	beq.n	8002876 <TIM_Base_SetConfig+0x52>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a17      	ldr	r2, [pc, #92]	; (80028d0 <TIM_Base_SetConfig+0xac>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d108      	bne.n	8002888 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800287c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	4313      	orrs	r3, r2
 8002886:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	4313      	orrs	r3, r2
 8002894:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	689a      	ldr	r2, [r3, #8]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a07      	ldr	r2, [pc, #28]	; (80028cc <TIM_Base_SetConfig+0xa8>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d103      	bne.n	80028bc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	691a      	ldr	r2, [r3, #16]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	615a      	str	r2, [r3, #20]
}
 80028c2:	bf00      	nop
 80028c4:	3714      	adds	r7, #20
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bc80      	pop	{r7}
 80028ca:	4770      	bx	lr
 80028cc:	40012c00 	.word	0x40012c00
 80028d0:	40000400 	.word	0x40000400

080028d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b087      	sub	sp, #28
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6a1b      	ldr	r3, [r3, #32]
 80028e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	f023 0201 	bic.w	r2, r3, #1
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	011b      	lsls	r3, r3, #4
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	4313      	orrs	r3, r2
 8002908:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	f023 030a 	bic.w	r3, r3, #10
 8002910:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	4313      	orrs	r3, r2
 8002918:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	621a      	str	r2, [r3, #32]
}
 8002926:	bf00      	nop
 8002928:	371c      	adds	r7, #28
 800292a:	46bd      	mov	sp, r7
 800292c:	bc80      	pop	{r7}
 800292e:	4770      	bx	lr

08002930 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002930:	b480      	push	{r7}
 8002932:	b087      	sub	sp, #28
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	f023 0210 	bic.w	r2, r3, #16
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800295a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	031b      	lsls	r3, r3, #12
 8002960:	697a      	ldr	r2, [r7, #20]
 8002962:	4313      	orrs	r3, r2
 8002964:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800296c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	011b      	lsls	r3, r3, #4
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	4313      	orrs	r3, r2
 8002976:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	693a      	ldr	r2, [r7, #16]
 8002982:	621a      	str	r2, [r3, #32]
}
 8002984:	bf00      	nop
 8002986:	371c      	adds	r7, #28
 8002988:	46bd      	mov	sp, r7
 800298a:	bc80      	pop	{r7}
 800298c:	4770      	bx	lr

0800298e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800298e:	b480      	push	{r7}
 8002990:	b085      	sub	sp, #20
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
 8002996:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	f043 0307 	orr.w	r3, r3, #7
 80029b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	609a      	str	r2, [r3, #8]
}
 80029b8:	bf00      	nop
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	bc80      	pop	{r7}
 80029c0:	4770      	bx	lr

080029c2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029c2:	b480      	push	{r7}
 80029c4:	b087      	sub	sp, #28
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	60f8      	str	r0, [r7, #12]
 80029ca:	60b9      	str	r1, [r7, #8]
 80029cc:	607a      	str	r2, [r7, #4]
 80029ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029dc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	021a      	lsls	r2, r3, #8
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	431a      	orrs	r2, r3
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	609a      	str	r2, [r3, #8]
}
 80029f6:	bf00      	nop
 80029f8:	371c      	adds	r7, #28
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr

08002a00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d101      	bne.n	8002a18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a14:	2302      	movs	r3, #2
 8002a16:	e041      	b.n	8002a9c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2202      	movs	r2, #2
 8002a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a14      	ldr	r2, [pc, #80]	; (8002aa8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d009      	beq.n	8002a70 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a64:	d004      	beq.n	8002a70 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a10      	ldr	r2, [pc, #64]	; (8002aac <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d10c      	bne.n	8002a8a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a76:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	68ba      	ldr	r2, [r7, #8]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68ba      	ldr	r2, [r7, #8]
 8002a88:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3714      	adds	r7, #20
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bc80      	pop	{r7}
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	40012c00 	.word	0x40012c00
 8002aac:	40000400 	.word	0x40000400

08002ab0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bc80      	pop	{r7}
 8002ac0:	4770      	bx	lr

08002ac2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b083      	sub	sp, #12
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr

08002ad4 <__libc_init_array>:
 8002ad4:	b570      	push	{r4, r5, r6, lr}
 8002ad6:	2600      	movs	r6, #0
 8002ad8:	4d0c      	ldr	r5, [pc, #48]	; (8002b0c <__libc_init_array+0x38>)
 8002ada:	4c0d      	ldr	r4, [pc, #52]	; (8002b10 <__libc_init_array+0x3c>)
 8002adc:	1b64      	subs	r4, r4, r5
 8002ade:	10a4      	asrs	r4, r4, #2
 8002ae0:	42a6      	cmp	r6, r4
 8002ae2:	d109      	bne.n	8002af8 <__libc_init_array+0x24>
 8002ae4:	f000 f822 	bl	8002b2c <_init>
 8002ae8:	2600      	movs	r6, #0
 8002aea:	4d0a      	ldr	r5, [pc, #40]	; (8002b14 <__libc_init_array+0x40>)
 8002aec:	4c0a      	ldr	r4, [pc, #40]	; (8002b18 <__libc_init_array+0x44>)
 8002aee:	1b64      	subs	r4, r4, r5
 8002af0:	10a4      	asrs	r4, r4, #2
 8002af2:	42a6      	cmp	r6, r4
 8002af4:	d105      	bne.n	8002b02 <__libc_init_array+0x2e>
 8002af6:	bd70      	pop	{r4, r5, r6, pc}
 8002af8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002afc:	4798      	blx	r3
 8002afe:	3601      	adds	r6, #1
 8002b00:	e7ee      	b.n	8002ae0 <__libc_init_array+0xc>
 8002b02:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b06:	4798      	blx	r3
 8002b08:	3601      	adds	r6, #1
 8002b0a:	e7f2      	b.n	8002af2 <__libc_init_array+0x1e>
 8002b0c:	08002b64 	.word	0x08002b64
 8002b10:	08002b64 	.word	0x08002b64
 8002b14:	08002b64 	.word	0x08002b64
 8002b18:	08002b68 	.word	0x08002b68

08002b1c <memset>:
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	4402      	add	r2, r0
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d100      	bne.n	8002b26 <memset+0xa>
 8002b24:	4770      	bx	lr
 8002b26:	f803 1b01 	strb.w	r1, [r3], #1
 8002b2a:	e7f9      	b.n	8002b20 <memset+0x4>

08002b2c <_init>:
 8002b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b2e:	bf00      	nop
 8002b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b32:	bc08      	pop	{r3}
 8002b34:	469e      	mov	lr, r3
 8002b36:	4770      	bx	lr

08002b38 <_fini>:
 8002b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b3a:	bf00      	nop
 8002b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b3e:	bc08      	pop	{r3}
 8002b40:	469e      	mov	lr, r3
 8002b42:	4770      	bx	lr
